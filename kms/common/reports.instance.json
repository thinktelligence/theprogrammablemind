{
  "configs": [
    "price and quantity are properties",
    "worth means price times quantity"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "article",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "article",
          "article",
          false
        ],
        [
          "ascending",
          "hierarchyAble",
          false
        ],
        [
          "ascending",
          "isEdee",
          false
        ],
        [
          "ascending",
          "isEder",
          false
        ],
        [
          "ascending",
          "object",
          false
        ],
        [
          "ascending",
          "ordering",
          false
        ],
        [
          "ascending",
          "property",
          false
        ],
        [
          "ascending",
          "queryable",
          false
        ],
        [
          "ascending",
          "sort_ordering",
          false
        ],
        [
          "ascending",
          "theAble",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "call",
          "verb",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "changeable",
          "changeable",
          false
        ],
        [
          "changes",
          "event",
          false
        ],
        [
          "changes",
          "verb",
          false
        ],
        [
          "column",
          "toAble",
          false
        ],
        [
          "column",
          "to_after_column_toAble",
          false
        ],
        [
          "comparable",
          "theAble",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "condition",
          "condition",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "descending",
          "hierarchyAble",
          false
        ],
        [
          "descending",
          "isEdee",
          false
        ],
        [
          "descending",
          "isEder",
          false
        ],
        [
          "descending",
          "object",
          false
        ],
        [
          "descending",
          "ordering",
          false
        ],
        [
          "descending",
          "property",
          false
        ],
        [
          "descending",
          "queryable",
          false
        ],
        [
          "descending",
          "sort_ordering",
          false
        ],
        [
          "descending",
          "theAble",
          false
        ],
        [
          "describe",
          "verb",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "distributable",
          "queryable",
          false
        ],
        [
          "divideByExpression",
          "mathematicalExpression",
          false
        ],
        [
          "divideByOperator",
          "mathematical_operator",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "each",
          "article",
          false
        ],
        [
          "event",
          "event",
          false
        ],
        [
          "every",
          "article",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "highest",
          "condition",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "isQuery",
          "verb",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "listable",
          "theAble",
          false
        ],
        [
          "lowest",
          "condition",
          false
        ],
        [
          "mathematical",
          "hierarchyAble",
          false
        ],
        [
          "mathematical",
          "isEdee",
          false
        ],
        [
          "mathematical",
          "isEder",
          false
        ],
        [
          "mathematical",
          "object",
          false
        ],
        [
          "mathematical",
          "operator_modifier",
          false
        ],
        [
          "mathematical",
          "property",
          false
        ],
        [
          "mathematical",
          "queryable",
          false
        ],
        [
          "mathematical",
          "theAble",
          false
        ],
        [
          "mathematicalExpression",
          "concept",
          false
        ],
        [
          "mathematicalExpression",
          "number",
          false
        ],
        [
          "mathematicalExpression",
          "property",
          false
        ],
        [
          "mathematical_operator",
          "adjective",
          true
        ],
        [
          "mathematical_operator",
          "concept",
          false
        ],
        [
          "mathematical_operator",
          "hierarchyAble",
          false
        ],
        [
          "mathematical_operator",
          "isEdee",
          false
        ],
        [
          "mathematical_operator",
          "isEder",
          false
        ],
        [
          "mathematical_operator",
          "object",
          false
        ],
        [
          "mathematical_operator",
          "operator",
          false
        ],
        [
          "mathematical_operator",
          "property",
          false
        ],
        [
          "mathematical_operator",
          "queryable",
          false
        ],
        [
          "mathematical_operator",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "minusExpression",
          "mathematicalExpression",
          false
        ],
        [
          "minusOperator",
          "mathematical_operator",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "reportAction",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "listable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "operator",
          "concept",
          false
        ],
        [
          "operator",
          "hierarchyAble",
          false
        ],
        [
          "operator",
          "isEdee",
          false
        ],
        [
          "operator",
          "isEder",
          false
        ],
        [
          "operator",
          "object",
          false
        ],
        [
          "operator",
          "property",
          false
        ],
        [
          "operator",
          "queryable",
          false
        ],
        [
          "operator",
          "theAble",
          false
        ],
        [
          "operator_modifier",
          "adjective",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "ordering",
          "concept",
          false
        ],
        [
          "ordering",
          "hierarchyAble",
          false
        ],
        [
          "ordering",
          "isEdee",
          false
        ],
        [
          "ordering",
          "isEder",
          false
        ],
        [
          "ordering",
          "object",
          false
        ],
        [
          "ordering",
          "property",
          false
        ],
        [
          "ordering",
          "queryable",
          false
        ],
        [
          "ordering",
          "theAble",
          false
        ],
        [
          "ordering_modifier",
          "adjective",
          false
        ],
        [
          "plusExpression",
          "mathematicalExpression",
          false
        ],
        [
          "plusOperator",
          "mathematical_operator",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "price",
          "number",
          false
        ],
        [
          "price",
          "property",
          false
        ],
        [
          "product",
          "the_after_product_property_theAble",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "comparable",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "property",
          "the_after_product_property_theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "quantity",
          "number",
          false
        ],
        [
          "quantity",
          "property",
          false
        ],
        [
          "queryable",
          "listable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "remove",
          "reportAction",
          false
        ],
        [
          "report",
          "changeable",
          false
        ],
        [
          "report",
          "it",
          false
        ],
        [
          "report",
          "theAble",
          false
        ],
        [
          "report",
          "this",
          false
        ],
        [
          "reportAction",
          "reportAction",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "show",
          "action",
          false
        ],
        [
          "show",
          "verb",
          false
        ],
        [
          "sort",
          "hierarchyAble",
          false
        ],
        [
          "sort",
          "isEdee",
          false
        ],
        [
          "sort",
          "isEder",
          false
        ],
        [
          "sort",
          "object",
          false
        ],
        [
          "sort",
          "ordering_modifier",
          false
        ],
        [
          "sort",
          "property",
          false
        ],
        [
          "sort",
          "queryable",
          false
        ],
        [
          "sort",
          "theAble",
          false
        ],
        [
          "sortOrdering",
          "adjective",
          false
        ],
        [
          "sort_ordering",
          "adjective",
          true
        ],
        [
          "sort_ordering",
          "concept",
          false
        ],
        [
          "sort_ordering",
          "hierarchyAble",
          false
        ],
        [
          "sort_ordering",
          "isEdee",
          false
        ],
        [
          "sort_ordering",
          "isEder",
          false
        ],
        [
          "sort_ordering",
          "object",
          false
        ],
        [
          "sort_ordering",
          "ordering",
          false
        ],
        [
          "sort_ordering",
          "property",
          false
        ],
        [
          "sort_ordering",
          "queryable",
          false
        ],
        [
          "sort_ordering",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "article",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "theAble",
          "the_after_product_property_theAble",
          false
        ],
        [
          "the_after_product_property_theAble",
          "the_after_product_property_theAble",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "timesExpression",
          "mathematicalExpression",
          false
        ],
        [
          "timesOperator",
          "mathematical_operator",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "to_after_column_toAble",
          false
        ],
        [
          "to_after_column_toAble",
          "to_after_column_toAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "x",
          "number",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "y",
          "number",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "price",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "price",
                0
              ],
              [
                "quantity",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "quantity",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n  summary\n\n    0.  price/0  (1, 0)                          - \"price\"\n    1.  list/0  (1, 6)                           - \"and\"\n    2.  quantity/0  (1, 10)                      - \"quantity\"\n    3.  is/0  (1, 15)                            - \"are\"\n    4.  property/0 (dead) (1, 21)                - \"properties\"\n\n  details\n\n    0. price/0  (1, 0) - \"price\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(price/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    1. list/0  (1, 6) - \"and\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(list/0), passthrough\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')\n                                                 , same/()\n                                                 Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                                 Right Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')\n\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    2. quantity/0  (1, 10) - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(quantity/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 10, 'end': 17}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n    3. is/0  (1, 15) - \"are\"\n                                   {\n                                     marker: \n                                         Operator(is/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n                                                 Left Selector: [ListableType(Listable(Type('queryable')))]\n                                                 Right Selector: [ListableType(Listable(Type('queryable')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    4. property/0 (dead) (1, 21) - \"properties\"\n                                   {\n                                     dead: true\n                                     marker: \n                                         Operator(property/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     value: \"property\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is ('price', 0)\n    Context:\n          {\n            default: true\n            marker: \n                Operator(price/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator) }')\n                        Left Selector: []\n                        Right Selector: []\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator) }')\n\n            range: {'start': 0, 'end': 4}\n            text: \"price\"\n            value: \"price\"\n            word: \"price\"\n          }\n\n\n>>>>>>>>>>>>> Counter 2\n  summary\n\n   *0.  price/1 (dead) (2, 0)                    - \"price\"\n    1.  list/0  (1, 6)                           - \"and\"\n    2.  quantity/0  (1, 10)                      - \"quantity\"\n    3.  is/0  (1, 15)                            - \"are\"\n    4.  property/0 (dead) (1, 21)                - \"properties\"\n\n  details\n\n   *0. price/1 (dead) (2, 0) - \"price\"\n                                   {\n                                     prioritized_by: [('price', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: \n                                         Operator(price/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    1. list/0  (1, 6) - \"and\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(list/0), passthrough\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')\n                                                 , same/()\n                                                 Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                                 Right Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')\n\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    2. quantity/0  (1, 10) - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(quantity/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 10, 'end': 17}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n    3. is/0  (1, 15) - \"are\"\n                                   {\n                                     marker: \n                                         Operator(is/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n                                                 Left Selector: [ListableType(Listable(Type('queryable')))]\n                                                 Right Selector: [ListableType(Listable(Type('queryable')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    4. property/0 (dead) (1, 21) - \"properties\"\n                                   {\n                                     dead: true\n                                     marker: \n                                         Operator(property/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     value: \"property\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is ('list', 0)\n    Context:\n          {\n            default: true\n            marker: \n                Operator(list/0), passthrough\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')\n                        , same/()\n                        Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                        Right Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')\n\n            range: {'start': 6, 'end': 8}\n            text: \"and\"\n            word: \"and\"\n          }\n\n\n>>>>>>>>>>>>> Counter 3\n  summary\n\n   *0.  list/1  (3, 0)                           - \"price and quantity\"\n    1.  is/0  (1, 15)                            - \"are\"\n    2.  property/0 (dead) (1, 21)                - \"properties\"\n\n  details\n\n   *0. list/1  (3, 0) - \"price and quantity\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: \n                                         Operator(list/1), passthrough\n                                           Selectors:\n                                             [\n                                               Selector, passthrough\n                                                 Bridge('{ ...operator, value: append(before, operator.value) }')\n                                                 , same/()\n                                                 Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...operator, value: append(before, operator.value) }')\n                                           Variables:\n                                             {'found_types': ['quantity', 'price'], 'type': ['number', 'listable', 'quantifier', 'comparable', 'quantity', 'property', 'queryable', 'theAble']}\n\n                                     range: {'start': 0, 'end': 17}\n                                     text: \"price and quantity\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('price', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: \n                                             Operator(price/1)\n                                               Selectors:\n                                                 [\n                                                   Selector\n                                                     Left Selector: []\n                                                     Right Selector: []\n                                                 ]\n\n                                         range: {'start': 0, 'end': 4}\n                                         text: \"price\"\n                                         value: \"price\"\n                                         word: \"price\"\n                                       }\n\n                                       {\n                                         default: true\n                                         marker: \n                                             Operator(quantity/0)\n                                               Selectors:\n                                                 [\n                                                   Selector\n                                                     Bridge('{ ...next(operator) }')\n                                                     Left Selector: []\n                                                     Right Selector: []\n                                                 ]\n                                               Evaluator:\n                                                 Bridge('{ ...next(operator) }')\n\n                                         range: {'start': 10, 'end': 17}\n                                         text: \"quantity\"\n                                         value: \"quantity\"\n                                         word: \"quantity\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    1. is/0  (1, 15) - \"are\"\n                                   {\n                                     marker: \n                                         Operator(is/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n                                                 Left Selector: [ListableType(Listable(Type('queryable')))]\n                                                 Right Selector: [ListableType(Listable(Type('queryable')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. property/0 (dead) (1, 21) - \"properties\"\n                                   {\n                                     dead: true\n                                     marker: \n                                         Operator(property/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     value: \"property\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is ('is', 0)\n    Context:\n          {\n            marker: \n                Operator(is/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n                        Left Selector: [ListableType(Listable(Type('queryable')))]\n                        Right Selector: [ListableType(Listable(Type('queryable')))]\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')\n\n            number: \"many\"\n            range: {'start': 19, 'end': 21}\n            text: \"are\"\n            word: \"are\"\n          }\n\n\n>>>>>>>>>>>>> Counter 4\n  summary\n\n   *0.  is/1  (4, 0)                             - \"price and quantity are properties\"\n\n  details\n\n   *0. is/1  (4, 0) - \"price and quantity are properties\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: \n                                         Operator(is/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n                                           Variables:\n                                             {'found_types': []}\n\n                                     number: \"many\"\n                                     one: \n                                         {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: \n                                               Operator(list/1), passthrough\n                                                 Selectors:\n                                                   [\n                                                     Selector, passthrough\n                                                       Bridge('{ ...operator, value: append(before, operator.value) }')\n                                                       , same/()\n                                                       Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                                       Right Selector: []\n                                                   ]\n                                                 Evaluator:\n                                                   Bridge('{ ...operator, value: append(before, operator.value) }')\n                                                 Variables:\n                                                   {'found_types': ['quantity', 'price'], 'type': ['number', 'listable', 'quantifier', 'comparable', 'quantity', 'property', 'queryable', 'theAble']}\n\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 32}\n                                           text: \"price and quantity\"\n                                           types: [\n                                           'quantity'\n,                                            'price'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('price', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: \n                                                   Operator(price/1)\n                                                     Selectors:\n                                                       [\n                                                         Selector\n                                                           Left Selector: []\n                                                           Right Selector: []\n                                                       ]\n\n                                               range: {'start': 0, 'end': 4}\n                                               text: \"price\"\n                                               value: \"price\"\n                                               word: \"price\"\n                                             }\n\n                                             {\n                                               default: true\n                                               marker: \n                                                   Operator(quantity/0)\n                                                     Selectors:\n                                                       [\n                                                         Selector\n                                                           Bridge('{ ...next(operator) }')\n                                                           Left Selector: []\n                                                           Right Selector: []\n                                                       ]\n                                                     Evaluator:\n                                                       Bridge('{ ...next(operator) }')\n\n                                               range: {'start': 10, 'end': 17}\n                                               text: \"quantity\"\n                                               value: \"quantity\"\n                                               word: \"quantity\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 32}\n                                     text: \"price and quantity are properties\"\n                                     two: \n                                         {\n                                           dead: true\n                                           marker: \n                                               Operator(property/0)\n                                                 Selectors:\n                                                   [\n                                                     Selector\n                                                       Left Selector: []\n                                                       Right Selector: []\n                                                   ]\n\n                                           range: {'start': 23, 'end': 32}\n                                           text: \"properties\"\n                                           types: [\n                                           'property'\n                                           ]\n                                           value: \"property\"\n                                           word: \"properties\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is ('is', 1)\n    Context:\n          {\n            prioritized_by: [('is', 0)]\n            marker: \n                Operator(is/1)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator) }')\n                        Left Selector: []\n                        Right Selector: []\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator) }')\n                  Variables:\n                    {'found_types': []}\n\n            number: \"many\"\n            one: \n                {\n                  default: true\n                  isList: true\n                  listable: true\n                  marker: \n                      Operator(list/1), passthrough\n                        Selectors:\n                          [\n                            Selector, passthrough\n                              Bridge('{ ...operator, value: append(before, operator.value) }')\n                              , same/()\n                              Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                              Right Selector: []\n                          ]\n                        Evaluator:\n                          Bridge('{ ...operator, value: append(before, operator.value) }')\n                        Variables:\n                          {'found_types': ['quantity', 'price'], 'type': ['number', 'listable', 'quantifier', 'comparable', 'quantity', 'property', 'queryable', 'theAble']}\n\n                  number: \"many\"\n                  range: {'start': 0, 'end': 32}\n                  text: \"price and quantity\"\n                  types: [\n                  'quantity'\n,                   'price'\n                  ]\n                  value: [\n                    {\n                      prioritized_by: [('price', 0)]\n                      dead: true\n                      default: true\n                      marker: \n                          Operator(price/1)\n                            Selectors:\n                              [\n                                Selector\n                                  Left Selector: []\n                                  Right Selector: []\n                              ]\n\n                      range: {'start': 0, 'end': 4}\n                      text: \"price\"\n                      value: \"price\"\n                      word: \"price\"\n                    }\n\n                    {\n                      default: true\n                      marker: \n                          Operator(quantity/0)\n                            Selectors:\n                              [\n                                Selector\n                                  Bridge('{ ...next(operator) }')\n                                  Left Selector: []\n                                  Right Selector: []\n                              ]\n                            Evaluator:\n                              Bridge('{ ...next(operator) }')\n\n                      range: {'start': 10, 'end': 17}\n                      text: \"quantity\"\n                      value: \"quantity\"\n                      word: \"quantity\"\n                    }\n                  ]\n                  word: \"and\"\n                }\n\n            range: {'start': 0, 'end': 32}\n            text: \"price and quantity are properties\"\n            two: \n                {\n                  dead: true\n                  marker: \n                      Operator(property/0)\n                        Selectors:\n                          [\n                            Selector\n                              Left Selector: []\n                              Right Selector: []\n                          ]\n\n                  range: {'start': 23, 'end': 32}\n                  text: \"properties\"\n                  types: [\n                  'property'\n                  ]\n                  value: \"property\"\n                  word: \"properties\"\n                }\n\n            word: \"are\"\n          }\n\n\n>>>>>>>>>>>>> Counter 5\n  summary\n\n   *0.  is/2 (dead) (5, 0)                       - \"price and quantity are properties\"\n\n  details\n\n   *0. is/2 (dead) (5, 0) - \"price and quantity are properties\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: \n                                         Operator(is/2)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     number: \"many\"\n                                     one: \n                                         {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: \n                                               Operator(list/1), passthrough\n                                                 Selectors:\n                                                   [\n                                                     Selector, passthrough\n                                                       Bridge('{ ...operator, value: append(before, operator.value) }')\n                                                       , same/()\n                                                       Left Selector: [And([\"ListableType(Listable(Type(variable: 'type')))\", \"Listable(Unify(Property(('context', 'instance')), Property(('variables', 'instance'))))\"])]\n                                                       Right Selector: []\n                                                   ]\n                                                 Evaluator:\n                                                   Bridge('{ ...operator, value: append(before, operator.value) }')\n                                                 Variables:\n                                                   {'found_types': ['quantity', 'price'], 'type': ['number', 'listable', 'quantifier', 'comparable', 'quantity', 'property', 'queryable', 'theAble']}\n\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 32}\n                                           text: \"price and quantity\"\n                                           types: [\n                                           'quantity'\n,                                            'price'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('price', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: \n                                                   Operator(price/1)\n                                                     Selectors:\n                                                       [\n                                                         Selector\n                                                           Left Selector: []\n                                                           Right Selector: []\n                                                       ]\n\n                                               range: {'start': 0, 'end': 4}\n                                               text: \"price\"\n                                               value: \"price\"\n                                               word: \"price\"\n                                             }\n\n                                             {\n                                               default: true\n                                               marker: \n                                                   Operator(quantity/0)\n                                                     Selectors:\n                                                       [\n                                                         Selector\n                                                           Bridge('{ ...next(operator) }')\n                                                           Left Selector: []\n                                                           Right Selector: []\n                                                       ]\n                                                     Evaluator:\n                                                       Bridge('{ ...next(operator) }')\n\n                                               range: {'start': 10, 'end': 17}\n                                               text: \"quantity\"\n                                               value: \"quantity\"\n                                               word: \"quantity\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 32}\n                                     text: \"price and quantity are properties\"\n                                     two: \n                                         {\n                                           dead: true\n                                           marker: \n                                               Operator(property/0)\n                                                 Selectors:\n                                                   [\n                                                     Selector\n                                                       Left Selector: []\n                                                       Right Selector: []\n                                                   ]\n\n                                           range: {'start': 23, 'end': 32}\n                                           text: \"properties\"\n                                           types: [\n                                           'property'\n                                           ]\n                                           value: \"property\"\n                                           word: \"properties\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "price and quantity are properties",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 32
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "price and quantity",
            "range": {
              "start": 0,
              "end": 32
            },
            "types": [
              "list",
              "price",
              "quantity"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "price",
                "value": "price",
                "default": true,
                "text": "price",
                "word": "price",
                "range": {
                  "start": 0,
                  "end": 4
                },
                "dead": true,
                "level": 1
              },
              {
                "marker": "quantity",
                "value": "quantity",
                "default": true,
                "text": "quantity",
                "word": "quantity",
                "range": {
                  "start": 10,
                  "end": 17
                },
                "level": 0
              }
            ],
            "level": 1
          },
          "two": {
            "value": "property",
            "text": "properties",
            "marker": "property",
            "dead": true,
            "word": "properties",
            "range": {
              "start": 23,
              "end": 32
            },
            "types": [
              "property"
            ],
            "level": 0,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "context_index": 1,
          "topLevel": true,
          "context_id": 2,
          "touchedBy": [
            "reports#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "price and quantity are properties"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "price",
            0
          ],
          [
            "property",
            0
          ],
          [
            "quantity",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "property",
            0
          ],
          [
            "quantity",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "property",
            0
          ]
        ]
      ],
      "summaries": [
        {
          "summaries": [
            {
              "operators": [
                {
                  "marker": [
                    "price",
                    0
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "list",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 8
                  }
                },
                {
                  "marker": [
                    "quantity",
                    0
                  ],
                  "range": {
                    "start": 10,
                    "end": 17
                  }
                },
                {
                  "marker": [
                    "is",
                    0
                  ],
                  "range": {
                    "start": 19,
                    "end": 21
                  }
                },
                {
                  "marker": [
                    "property",
                    0
                  ],
                  "range": {
                    "start": 23,
                    "end": 32
                  }
                }
              ],
              "counter": 1
            },
            {
              "operators": [
                {
                  "marker": [
                    "price",
                    1
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "list",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 8
                  }
                },
                {
                  "marker": [
                    "quantity",
                    0
                  ],
                  "range": {
                    "start": 10,
                    "end": 17
                  }
                },
                {
                  "marker": [
                    "is",
                    0
                  ],
                  "range": {
                    "start": 19,
                    "end": 21
                  }
                },
                {
                  "marker": [
                    "property",
                    0
                  ],
                  "range": {
                    "start": 23,
                    "end": 32
                  }
                }
              ],
              "counter": 2
            },
            {
              "operators": [
                {
                  "marker": [
                    "list",
                    1
                  ],
                  "range": {
                    "start": 0,
                    "end": 17
                  }
                },
                {
                  "marker": [
                    "is",
                    0
                  ],
                  "range": {
                    "start": 19,
                    "end": 21
                  }
                },
                {
                  "marker": [
                    "property",
                    0
                  ],
                  "range": {
                    "start": 23,
                    "end": 32
                  }
                }
              ],
              "counter": 3
            },
            {
              "operators": [
                {
                  "marker": [
                    "is",
                    1
                  ],
                  "range": {
                    "start": 0,
                    "end": 32
                  }
                }
              ],
              "counter": 4
            },
            {
              "operators": [
                {
                  "marker": [
                    "is",
                    2
                  ],
                  "range": {
                    "start": 0,
                    "end": 32
                  }
                }
              ],
              "counter": 5
            }
          ],
          "length": 1
        }
      ],
      "learned_contextual_priorities": [],
      "rtf_associations": [],
      "query": "price and quantity are properties",
      "key": {
        "query": "price and quantity are properties"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "article",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "article",
          "article",
          false
        ],
        [
          "ascending",
          "hierarchyAble",
          false
        ],
        [
          "ascending",
          "isEdee",
          false
        ],
        [
          "ascending",
          "isEder",
          false
        ],
        [
          "ascending",
          "object",
          false
        ],
        [
          "ascending",
          "ordering",
          false
        ],
        [
          "ascending",
          "property",
          false
        ],
        [
          "ascending",
          "queryable",
          false
        ],
        [
          "ascending",
          "sort_ordering",
          false
        ],
        [
          "ascending",
          "theAble",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "call",
          "verb",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "changeable",
          "changeable",
          false
        ],
        [
          "changes",
          "event",
          false
        ],
        [
          "changes",
          "verb",
          false
        ],
        [
          "column",
          "toAble",
          false
        ],
        [
          "column",
          "to_after_column_toAble",
          false
        ],
        [
          "comparable",
          "theAble",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "condition",
          "condition",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "descending",
          "hierarchyAble",
          false
        ],
        [
          "descending",
          "isEdee",
          false
        ],
        [
          "descending",
          "isEder",
          false
        ],
        [
          "descending",
          "object",
          false
        ],
        [
          "descending",
          "ordering",
          false
        ],
        [
          "descending",
          "property",
          false
        ],
        [
          "descending",
          "queryable",
          false
        ],
        [
          "descending",
          "sort_ordering",
          false
        ],
        [
          "descending",
          "theAble",
          false
        ],
        [
          "describe",
          "verb",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "distributable",
          "queryable",
          false
        ],
        [
          "divideByExpression",
          "mathematicalExpression",
          false
        ],
        [
          "divideByOperator",
          "mathematical_operator",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "each",
          "article",
          false
        ],
        [
          "event",
          "event",
          false
        ],
        [
          "every",
          "article",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "highest",
          "condition",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "isQuery",
          "verb",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "listable",
          "theAble",
          false
        ],
        [
          "lowest",
          "condition",
          false
        ],
        [
          "mathematical",
          "hierarchyAble",
          false
        ],
        [
          "mathematical",
          "isEdee",
          false
        ],
        [
          "mathematical",
          "isEder",
          false
        ],
        [
          "mathematical",
          "object",
          false
        ],
        [
          "mathematical",
          "operator_modifier",
          false
        ],
        [
          "mathematical",
          "property",
          false
        ],
        [
          "mathematical",
          "queryable",
          false
        ],
        [
          "mathematical",
          "theAble",
          false
        ],
        [
          "mathematicalExpression",
          "concept",
          false
        ],
        [
          "mathematicalExpression",
          "number",
          false
        ],
        [
          "mathematicalExpression",
          "property",
          false
        ],
        [
          "mathematical_operator",
          "adjective",
          true
        ],
        [
          "mathematical_operator",
          "concept",
          false
        ],
        [
          "mathematical_operator",
          "hierarchyAble",
          false
        ],
        [
          "mathematical_operator",
          "isEdee",
          false
        ],
        [
          "mathematical_operator",
          "isEder",
          false
        ],
        [
          "mathematical_operator",
          "object",
          false
        ],
        [
          "mathematical_operator",
          "operator",
          false
        ],
        [
          "mathematical_operator",
          "property",
          false
        ],
        [
          "mathematical_operator",
          "queryable",
          false
        ],
        [
          "mathematical_operator",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "minusExpression",
          "mathematicalExpression",
          false
        ],
        [
          "minusOperator",
          "mathematical_operator",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "reportAction",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "listable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "operator",
          "concept",
          false
        ],
        [
          "operator",
          "hierarchyAble",
          false
        ],
        [
          "operator",
          "isEdee",
          false
        ],
        [
          "operator",
          "isEder",
          false
        ],
        [
          "operator",
          "object",
          false
        ],
        [
          "operator",
          "property",
          false
        ],
        [
          "operator",
          "queryable",
          false
        ],
        [
          "operator",
          "theAble",
          false
        ],
        [
          "operator_modifier",
          "adjective",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "ordering",
          "concept",
          false
        ],
        [
          "ordering",
          "hierarchyAble",
          false
        ],
        [
          "ordering",
          "isEdee",
          false
        ],
        [
          "ordering",
          "isEder",
          false
        ],
        [
          "ordering",
          "object",
          false
        ],
        [
          "ordering",
          "property",
          false
        ],
        [
          "ordering",
          "queryable",
          false
        ],
        [
          "ordering",
          "theAble",
          false
        ],
        [
          "ordering_modifier",
          "adjective",
          false
        ],
        [
          "plusExpression",
          "mathematicalExpression",
          false
        ],
        [
          "plusOperator",
          "mathematical_operator",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "price",
          "number",
          false
        ],
        [
          "price",
          "property",
          false
        ],
        [
          "product",
          "the_after_product_property_theAble",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "comparable",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "property",
          "the_after_product_property_theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "quantity",
          "number",
          false
        ],
        [
          "quantity",
          "property",
          false
        ],
        [
          "queryable",
          "listable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "remove",
          "reportAction",
          false
        ],
        [
          "report",
          "changeable",
          false
        ],
        [
          "report",
          "it",
          false
        ],
        [
          "report",
          "theAble",
          false
        ],
        [
          "report",
          "this",
          false
        ],
        [
          "reportAction",
          "reportAction",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "show",
          "action",
          false
        ],
        [
          "show",
          "verb",
          false
        ],
        [
          "sort",
          "hierarchyAble",
          false
        ],
        [
          "sort",
          "isEdee",
          false
        ],
        [
          "sort",
          "isEder",
          false
        ],
        [
          "sort",
          "object",
          false
        ],
        [
          "sort",
          "ordering_modifier",
          false
        ],
        [
          "sort",
          "property",
          false
        ],
        [
          "sort",
          "queryable",
          false
        ],
        [
          "sort",
          "theAble",
          false
        ],
        [
          "sortOrdering",
          "adjective",
          false
        ],
        [
          "sort_ordering",
          "adjective",
          true
        ],
        [
          "sort_ordering",
          "concept",
          false
        ],
        [
          "sort_ordering",
          "hierarchyAble",
          false
        ],
        [
          "sort_ordering",
          "isEdee",
          false
        ],
        [
          "sort_ordering",
          "isEder",
          false
        ],
        [
          "sort_ordering",
          "object",
          false
        ],
        [
          "sort_ordering",
          "ordering",
          false
        ],
        [
          "sort_ordering",
          "property",
          false
        ],
        [
          "sort_ordering",
          "queryable",
          false
        ],
        [
          "sort_ordering",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "article",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "theAble",
          "the_after_product_property_theAble",
          false
        ],
        [
          "the_after_product_property_theAble",
          "the_after_product_property_theAble",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "timesExpression",
          "mathematicalExpression",
          false
        ],
        [
          "timesOperator",
          "mathematical_operator",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "to_after_column_toAble",
          false
        ],
        [
          "to_after_column_toAble",
          "to_after_column_toAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "x",
          "number",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "y",
          "number",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "price",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "timesOperator",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "price",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "price",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "quantity",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "timesOperator",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n  summary\n\n    0.  unknown/0  (1, 0)                        - \"worth\"\n    1.  means/0  (1, 2)                          - \"means\"\n    2.  price/0  (1, 5)                          - \"price\"\n    3.  timesOperator/0  (1, 8)                  - \"times\"\n    4.  quantity/0  (1, 11)                      - \"quantity\"\n\n  details\n\n    0. unknown/0  (1, 0) - \"worth\"\n                                   {\n                                     marker: \n                                         Operator(unknown/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...operator, unknown: true, dead: true }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...operator, unknown: true, dead: true }')\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  (1, 2) - \"means\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(means/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n                                                 Left Selector: [Any]\n                                                 Right Selector: [Any]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. price/0  (1, 5) - \"price\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(price/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  (1, 8) - \"times\"\n                                   {\n                                     marker: \n                                         Operator(timesOperator/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n                                                 Left Selector: [ListableType(Listable(Type('number')))]\n                                                 Right Selector: [ListableType(Listable(Type('number')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"timesOperator\"\n                                     word: \"times\"\n                                   }\n    4. quantity/0  (1, 11) - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(quantity/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is ('unknown', 0)\n    Context:\n          {\n            marker: \n                Operator(unknown/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...operator, unknown: true, dead: true }')\n                        Left Selector: []\n                        Right Selector: []\n                    ]\n                  Evaluator:\n                    Bridge('{ ...operator, unknown: true, dead: true }')\n\n            range: {'start': 0, 'end': 4}\n            text: \"worth\"\n            unknown: true\n            value: \"worth\"\n            word: \"worth\"\n          }\n\n\n>>>>>>>>>>>>> Counter 2\n  summary\n\n   *0.  unknown/0 (dead) (2, 0)                  - \"worth\"\n    1.  means/0  (1, 2)                          - \"means\"\n    2.  price/0  (1, 5)                          - \"price\"\n    3.  timesOperator/0  (1, 8)                  - \"times\"\n    4.  quantity/0  (1, 11)                      - \"quantity\"\n\n  details\n\n   *0. unknown/0 (dead) (2, 0) - \"worth\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: \n                                         Operator(unknown/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...operator, unknown: true, dead: true }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...operator, unknown: true, dead: true }')\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  (1, 2) - \"means\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(means/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n                                                 Left Selector: [Any]\n                                                 Right Selector: [Any]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. price/0  (1, 5) - \"price\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(price/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  (1, 8) - \"times\"\n                                   {\n                                     marker: \n                                         Operator(timesOperator/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n                                                 Left Selector: [ListableType(Listable(Type('number')))]\n                                                 Right Selector: [ListableType(Listable(Type('number')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"timesOperator\"\n                                     word: \"times\"\n                                   }\n    4. quantity/0  (1, 11) - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(quantity/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is ('price', 0)\n    Context:\n          {\n            default: true\n            marker: \n                Operator(price/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator) }')\n                        Left Selector: []\n                        Right Selector: []\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator) }')\n\n            range: {'start': 12, 'end': 16}\n            text: \"price\"\n            value: \"price\"\n            word: \"price\"\n          }\n\n\n>>>>>>>>>>>>> Counter 3\n  summary\n\n    0.  unknown/0 (dead) (2, 0)                  - \"worth\"\n    1.  means/0  (1, 2)                          - \"means\"\n   *2.  price/1 (dead) (2, 1)                    - \"price\"\n    3.  timesOperator/0  (1, 8)                  - \"times\"\n    4.  quantity/0  (1, 11)                      - \"quantity\"\n\n  details\n\n    0. unknown/0 (dead) (2, 0) - \"worth\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: \n                                         Operator(unknown/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...operator, unknown: true, dead: true }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...operator, unknown: true, dead: true }')\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  (1, 2) - \"means\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(means/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n                                                 Left Selector: [Any]\n                                                 Right Selector: [Any]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. price/1 (dead) (2, 1) - \"price\"\n                                   {\n                                     prioritized_by: [('price', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: \n                                         Operator(price/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  (1, 8) - \"times\"\n                                   {\n                                     marker: \n                                         Operator(timesOperator/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n                                                 Left Selector: [ListableType(Listable(Type('number')))]\n                                                 Right Selector: [ListableType(Listable(Type('number')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"timesOperator\"\n                                     word: \"times\"\n                                   }\n    4. quantity/0  (1, 11) - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(quantity/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator) }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator) }')\n\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is ('quantity', 0)\n    Context:\n          {\n            default: true\n            marker: \n                Operator(quantity/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator) }')\n                        Left Selector: []\n                        Right Selector: []\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator) }')\n\n            range: {'start': 24, 'end': 31}\n            text: \"quantity\"\n            value: \"quantity\"\n            word: \"quantity\"\n          }\n\n\n>>>>>>>>>>>>> Counter 4\n  summary\n\n    0.  unknown/0 (dead) (2, 0)                  - \"worth\"\n    1.  means/0  (1, 2)                          - \"means\"\n    2.  price/1 (dead) (2, 1)                    - \"price\"\n    3.  timesOperator/0  (1, 8)                  - \"times\"\n   *4.  quantity/1 (dead) (2, 2)                 - \"quantity\"\n\n  details\n\n    0. unknown/0 (dead) (2, 0) - \"worth\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: \n                                         Operator(unknown/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...operator, unknown: true, dead: true }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...operator, unknown: true, dead: true }')\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  (1, 2) - \"means\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(means/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n                                                 Left Selector: [Any]\n                                                 Right Selector: [Any]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. price/1 (dead) (2, 1) - \"price\"\n                                   {\n                                     prioritized_by: [('price', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: \n                                         Operator(price/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  (1, 8) - \"times\"\n                                   {\n                                     marker: \n                                         Operator(timesOperator/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n                                                 Left Selector: [ListableType(Listable(Type('number')))]\n                                                 Right Selector: [ListableType(Listable(Type('number')))]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"timesOperator\"\n                                     word: \"times\"\n                                   }\n   *4. quantity/1 (dead) (2, 2) - \"quantity\"\n                                   {\n                                     prioritized_by: [('quantity', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: \n                                         Operator(quantity/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is ('timesOperator', 0)\n    Context:\n          {\n            marker: \n                Operator(timesOperator/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), val\n                          null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n                        Left Selector: [ListableType(Listable(Type('number')))]\n                        Right Selector: [ListableType(Listable(Type('number')))]\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value:\n                                  null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')\n\n            range: {'start': 18, 'end': 22}\n            text: \"times\"\n            value: \"timesOperator\"\n            word: \"times\"\n          }\n\n\n>>>>>>>>>>>>> Counter 5\n  summary\n\n    0.  unknown/0 (dead) (2, 0)                  - \"worth\"\n    1.  means/0  (1, 2)                          - \"means\"\n   *2.  timesExpression/1 (dead) (3, 0)          - \"price times quantity\"\n\n  details\n\n    0. unknown/0 (dead) (2, 0) - \"worth\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: \n                                         Operator(unknown/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...operator, unknown: true, dead: true }')\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...operator, unknown: true, dead: true }')\n\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  (1, 2) - \"means\"\n                                   {\n                                     default: true\n                                     marker: \n                                         Operator(means/0)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n                                                 Left Selector: [Any]\n                                                 Right Selector: [Any]\n                                             ]\n                                           Evaluator:\n                                             Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. timesExpression/1 (dead) (3, 0) - \"price times quantity\"\n                                   {\n                                     prioritized_by: [('timesOperator', 0)]\n                                     dead: true\n                                     evaluate: true\n                                     isResponse: true\n                                     marker: \n                                         Operator(timesExpression/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: []\n                                                 Right Selector: []\n                                             ]\n\n                                     number: \"one\"\n                                     range: {'start': 12, 'end': 31}\n                                     text: \"price times quantity\"\n                                     types: [\n                                     'number'\n,                                      'property'\n                                     ]\n                                     value: None\n                                     word: \"times\"\n                                     x: \n                                         {\n                                           prioritized_by: [('price', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: \n                                               Operator(price/1)\n                                                 Selectors:\n                                                   [\n                                                     Selector\n                                                       Left Selector: []\n                                                       Right Selector: []\n                                                   ]\n\n                                           range: {'start': 12, 'end': 16}\n                                           text: \"price\"\n                                           types: [\n                                           'price'\n                                           ]\n                                           value: \"price\"\n                                           word: \"price\"\n                                         }\n\n                                     y: \n                                         {\n                                           prioritized_by: [('quantity', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: \n                                               Operator(quantity/1)\n                                                 Selectors:\n                                                   [\n                                                     Selector\n                                                       Left Selector: []\n                                                       Right Selector: []\n                                                   ]\n\n                                           range: {'start': 24, 'end': 31}\n                                           text: \"quantity\"\n                                           types: [\n                                           'quantity'\n                                           ]\n                                           value: \"quantity\"\n                                           word: \"quantity\"\n                                         }\n\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is ('means', 0)\n    Context:\n          {\n            default: true\n            marker: \n                Operator(means/0)\n                  Selectors:\n                    [\n                      Selector\n                        Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n                        Left Selector: [Any]\n                        Right Selector: [Any]\n                    ]\n                  Evaluator:\n                    Bridge('{ ...next(operator), from: before[0], to: after[0] }')\n\n            range: {'start': 6, 'end': 10}\n            text: \"means\"\n            value: \"means\"\n            word: \"means\"\n          }\n\n\n>>>>>>>>>>>>> Counter 6\n  summary\n\n   *0.  means/1 (dead) (4, 0)                    - \"worth means price times quantity\"\n\n  details\n\n   *0. means/1 (dead) (4, 0) - \"worth means price times quantity\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from: \n                                         {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: \n                                               Operator(unknown/0)\n                                                 Selectors:\n                                                   [\n                                                     Selector\n                                                       Bridge('{ ...operator, unknown: true, dead: true }')\n                                                       Left Selector: []\n                                                       Right Selector: []\n                                                   ]\n                                                 Evaluator:\n                                                   Bridge('{ ...operator, unknown: true, dead: true }')\n\n                                           range: {'start': 0, 'end': 4}\n                                           text: \"worth\"\n                                           unknown: true\n                                           value: \"worth\"\n                                           word: \"worth\"\n                                         }\n\n                                     marker: \n                                         Operator(means/1)\n                                           Selectors:\n                                             [\n                                               Selector\n                                                 Left Selector: [Any]\n                                                 Right Selector: [Any]\n                                             ]\n\n                                     range: {'start': 0, 'end': 31}\n                                     text: \"worth means price times quantity\"\n                                     to: \n                                         {\n                                           prioritized_by: [('timesOperator', 0)]\n                                           dead: true\n                                           evaluate: true\n                                           isResponse: true\n                                           marker: \n                                               Operator(timesExpression/1)\n                                                 Selectors:\n                                                   [\n                                                     Selector\n                                                       Left Selector: []\n                                                       Right Selector: []\n                                                   ]\n\n                                           number: \"one\"\n                                           range: {'start': 12, 'end': 31}\n                                           text: \"price times quantity\"\n                                           types: [\n                                           'number'\n,                                            'property'\n                                           ]\n                                           value: None\n                                           word: \"times\"\n                                           x: \n                                               {\n                                                 prioritized_by: [('price', 0)]\n                                                 dead: true\n                                                 default: true\n                                                 marker: \n                                                     Operator(price/1)\n                                                       Selectors:\n                                                         [\n                                                           Selector\n                                                             Left Selector: []\n                                                             Right Selector: []\n                                                         ]\n\n                                                 range: {'start': 12, 'end': 16}\n                                                 text: \"price\"\n                                                 types: [\n                                                 'price'\n                                                 ]\n                                                 value: \"price\"\n                                                 word: \"price\"\n                                               }\n\n                                           y: \n                                               {\n                                                 prioritized_by: [('quantity', 0)]\n                                                 dead: true\n                                                 default: true\n                                                 marker: \n                                                     Operator(quantity/1)\n                                                       Selectors:\n                                                         [\n                                                           Selector\n                                                             Left Selector: []\n                                                             Right Selector: []\n                                                         ]\n\n                                                 range: {'start': 24, 'end': 31}\n                                                 text: \"quantity\"\n                                                 types: [\n                                                 'quantity'\n                                                 ]\n                                                 value: \"quantity\"\n                                                 word: \"quantity\"\n                                               }\n\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "worth means price times quantity",
          "word": "means",
          "range": {
            "start": 0,
            "end": 31
          },
          "dead": true,
          "from": {
            "value": "worth",
            "unknown": true,
            "text": "worth",
            "marker": "unknown",
            "word": "worth",
            "range": {
              "start": 0,
              "end": 4
            },
            "dead": true,
            "level": 0
          },
          "to": {
            "value": null,
            "text": "price times quantity",
            "marker": "timesExpression",
            "word": "times",
            "range": {
              "start": 12,
              "end": 31
            },
            "dead": true,
            "types": [
              "number",
              "property",
              "timesExpression"
            ],
            "x": {
              "marker": "price",
              "value": "price",
              "default": true,
              "text": "price",
              "word": "price",
              "range": {
                "start": 12,
                "end": 16
              },
              "dead": true,
              "types": [
                "price"
              ],
              "level": 1
            },
            "y": {
              "marker": "quantity",
              "value": "quantity",
              "default": true,
              "text": "quantity",
              "word": "quantity",
              "range": {
                "start": 24,
                "end": 31
              },
              "dead": true,
              "types": [
                "quantity"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "context_index": 1,
          "topLevel": true,
          "context_id": 2,
          "touchedBy": [
            "reports#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "worth means price times quantity"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "means",
            0
          ],
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            0
          ]
        ]
      ],
      "summaries": [
        {
          "summaries": [
            {
              "operators": [
                {
                  "marker": [
                    "unknown",
                    0
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "means",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 10
                  }
                },
                {
                  "marker": [
                    "price",
                    0
                  ],
                  "range": {
                    "start": 12,
                    "end": 16
                  }
                },
                {
                  "marker": [
                    "timesOperator",
                    0
                  ],
                  "range": {
                    "start": 18,
                    "end": 22
                  }
                },
                {
                  "marker": [
                    "quantity",
                    0
                  ],
                  "range": {
                    "start": 24,
                    "end": 31
                  }
                }
              ],
              "counter": 1
            },
            {
              "operators": [
                {
                  "marker": [
                    "unknown",
                    0
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "means",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 10
                  }
                },
                {
                  "marker": [
                    "price",
                    0
                  ],
                  "range": {
                    "start": 12,
                    "end": 16
                  }
                },
                {
                  "marker": [
                    "timesOperator",
                    0
                  ],
                  "range": {
                    "start": 18,
                    "end": 22
                  }
                },
                {
                  "marker": [
                    "quantity",
                    0
                  ],
                  "range": {
                    "start": 24,
                    "end": 31
                  }
                }
              ],
              "counter": 2
            },
            {
              "operators": [
                {
                  "marker": [
                    "unknown",
                    0
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "means",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 10
                  }
                },
                {
                  "marker": [
                    "price",
                    1
                  ],
                  "range": {
                    "start": 12,
                    "end": 16
                  }
                },
                {
                  "marker": [
                    "timesOperator",
                    0
                  ],
                  "range": {
                    "start": 18,
                    "end": 22
                  }
                },
                {
                  "marker": [
                    "quantity",
                    0
                  ],
                  "range": {
                    "start": 24,
                    "end": 31
                  }
                }
              ],
              "counter": 3
            },
            {
              "operators": [
                {
                  "marker": [
                    "unknown",
                    0
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "means",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 10
                  }
                },
                {
                  "marker": [
                    "price",
                    1
                  ],
                  "range": {
                    "start": 12,
                    "end": 16
                  }
                },
                {
                  "marker": [
                    "timesOperator",
                    0
                  ],
                  "range": {
                    "start": 18,
                    "end": 22
                  }
                },
                {
                  "marker": [
                    "quantity",
                    1
                  ],
                  "range": {
                    "start": 24,
                    "end": 31
                  }
                }
              ],
              "counter": 4
            },
            {
              "operators": [
                {
                  "marker": [
                    "unknown",
                    0
                  ],
                  "range": {
                    "start": 0,
                    "end": 4
                  }
                },
                {
                  "marker": [
                    "means",
                    0
                  ],
                  "range": {
                    "start": 6,
                    "end": 10
                  }
                },
                {
                  "marker": [
                    "timesExpression",
                    1
                  ],
                  "range": {
                    "start": 12,
                    "end": 31
                  }
                }
              ],
              "counter": 5
            },
            {
              "operators": [
                {
                  "marker": [
                    "means",
                    1
                  ],
                  "range": {
                    "start": 0,
                    "end": 31
                  }
                }
              ],
              "counter": 6
            }
          ],
          "length": 1
        }
      ],
      "learned_contextual_priorities": [],
      "rtf_associations": [],
      "query": "worth means price times quantity",
      "key": {
        "query": "worth means price times quantity"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "price",
        0
      ],
      [
        "property",
        0
      ],
      [
        "quantity",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "property",
        0
      ],
      [
        "quantity",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "property",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        0
      ]
    ]
  ],
  "summaries": [
    {
      "summaries": [
        {
          "operators": [
            {
              "marker": [
                "price",
                0
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "list",
                0
              ],
              "range": {
                "start": 6,
                "end": 8
              }
            },
            {
              "marker": [
                "quantity",
                0
              ],
              "range": {
                "start": 10,
                "end": 17
              }
            },
            {
              "marker": [
                "is",
                0
              ],
              "range": {
                "start": 19,
                "end": 21
              }
            },
            {
              "marker": [
                "property",
                0
              ],
              "range": {
                "start": 23,
                "end": 32
              }
            }
          ],
          "counter": 1
        },
        {
          "operators": [
            {
              "marker": [
                "price",
                1
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "list",
                0
              ],
              "range": {
                "start": 6,
                "end": 8
              }
            },
            {
              "marker": [
                "quantity",
                0
              ],
              "range": {
                "start": 10,
                "end": 17
              }
            },
            {
              "marker": [
                "is",
                0
              ],
              "range": {
                "start": 19,
                "end": 21
              }
            },
            {
              "marker": [
                "property",
                0
              ],
              "range": {
                "start": 23,
                "end": 32
              }
            }
          ],
          "counter": 2
        },
        {
          "operators": [
            {
              "marker": [
                "list",
                1
              ],
              "range": {
                "start": 0,
                "end": 17
              }
            },
            {
              "marker": [
                "is",
                0
              ],
              "range": {
                "start": 19,
                "end": 21
              }
            },
            {
              "marker": [
                "property",
                0
              ],
              "range": {
                "start": 23,
                "end": 32
              }
            }
          ],
          "counter": 3
        },
        {
          "operators": [
            {
              "marker": [
                "is",
                1
              ],
              "range": {
                "start": 0,
                "end": 32
              }
            }
          ],
          "counter": 4
        },
        {
          "operators": [
            {
              "marker": [
                "is",
                2
              ],
              "range": {
                "start": 0,
                "end": 32
              }
            }
          ],
          "counter": 5
        }
      ],
      "length": 1
    },
    {
      "summaries": [
        {
          "operators": [
            {
              "marker": [
                "unknown",
                0
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "means",
                0
              ],
              "range": {
                "start": 6,
                "end": 10
              }
            },
            {
              "marker": [
                "price",
                0
              ],
              "range": {
                "start": 12,
                "end": 16
              }
            },
            {
              "marker": [
                "timesOperator",
                0
              ],
              "range": {
                "start": 18,
                "end": 22
              }
            },
            {
              "marker": [
                "quantity",
                0
              ],
              "range": {
                "start": 24,
                "end": 31
              }
            }
          ],
          "counter": 1
        },
        {
          "operators": [
            {
              "marker": [
                "unknown",
                0
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "means",
                0
              ],
              "range": {
                "start": 6,
                "end": 10
              }
            },
            {
              "marker": [
                "price",
                0
              ],
              "range": {
                "start": 12,
                "end": 16
              }
            },
            {
              "marker": [
                "timesOperator",
                0
              ],
              "range": {
                "start": 18,
                "end": 22
              }
            },
            {
              "marker": [
                "quantity",
                0
              ],
              "range": {
                "start": 24,
                "end": 31
              }
            }
          ],
          "counter": 2
        },
        {
          "operators": [
            {
              "marker": [
                "unknown",
                0
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "means",
                0
              ],
              "range": {
                "start": 6,
                "end": 10
              }
            },
            {
              "marker": [
                "price",
                1
              ],
              "range": {
                "start": 12,
                "end": 16
              }
            },
            {
              "marker": [
                "timesOperator",
                0
              ],
              "range": {
                "start": 18,
                "end": 22
              }
            },
            {
              "marker": [
                "quantity",
                0
              ],
              "range": {
                "start": 24,
                "end": 31
              }
            }
          ],
          "counter": 3
        },
        {
          "operators": [
            {
              "marker": [
                "unknown",
                0
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "means",
                0
              ],
              "range": {
                "start": 6,
                "end": 10
              }
            },
            {
              "marker": [
                "price",
                1
              ],
              "range": {
                "start": 12,
                "end": 16
              }
            },
            {
              "marker": [
                "timesOperator",
                0
              ],
              "range": {
                "start": 18,
                "end": 22
              }
            },
            {
              "marker": [
                "quantity",
                1
              ],
              "range": {
                "start": 24,
                "end": 31
              }
            }
          ],
          "counter": 4
        },
        {
          "operators": [
            {
              "marker": [
                "unknown",
                0
              ],
              "range": {
                "start": 0,
                "end": 4
              }
            },
            {
              "marker": [
                "means",
                0
              ],
              "range": {
                "start": 6,
                "end": 10
              }
            },
            {
              "marker": [
                "timesExpression",
                1
              ],
              "range": {
                "start": 12,
                "end": 31
              }
            }
          ],
          "counter": 5
        },
        {
          "operators": [
            {
              "marker": [
                "means",
                1
              ],
              "range": {
                "start": 0,
                "end": 31
              }
            }
          ],
          "counter": 6
        }
      ],
      "length": 1
    }
  ],
  "learned_contextual_priorities": []
}