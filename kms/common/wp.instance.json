{
  "configs": [
    "words are countable",
    "characters are countable",
    "paragraphs are countable"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"words\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: words, unknown: True, value: words, word: words})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 18}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 6, 'end': 8}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 4\n   *0. is/1  (3, 0) - \"words are countable\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 18}\n                                           text: \"words\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"words\"\n                                           word: \"words\"\n                                         }\n\n                                     range: {'start': 0, 'end': 18}\n                                     text: \"words are countable\"\n                                     two:                                          {\n                                           prioritized_by: [('countable', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 10, 'end': 18}\n                                           text: \"countable\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: \"countable\"\n                                           word: \"countable\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 18}, text: words, types: ['unknown'], unknown: True, value: words, word: words}), range: {'start': 0, 'end': 18}, text: words are countable, two: Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 18}, text: countable, types: ['countable'], value: countable, word: countable}), word: are})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/2 (dead) (4, 0) - \"words are countable\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 18}\n                                           text: \"words\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"words\"\n                                           word: \"words\"\n                                         }\n\n                                     range: {'start': 0, 'end': 18}\n                                     text: \"words are countable\"\n                                     two:                                          {\n                                           prioritized_by: [('countable', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 10, 'end': 18}\n                                           text: \"countable\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: \"countable\"\n                                           word: \"countable\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "words are countable",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 18
          },
          "one": {
            "number": "many",
            "value": "words",
            "unknown": true,
            "text": "words",
            "marker": "unknown",
            "word": "words",
            "range": {
              "start": 0,
              "end": 18
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "countable",
            "value": "countable",
            "default": true,
            "text": "countable",
            "word": "countable",
            "range": {
              "start": 10,
              "end": 18
            },
            "dead": true,
            "types": [
              "countable"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "words are countable"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "words are countable",
      "key": {
        "query": "words are countable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word",
          "countable",
          false
        ],
        [
          "word",
          "hierarchyAble",
          false
        ],
        [
          "word",
          "isEdee",
          false
        ],
        [
          "word",
          "isEder",
          false
        ],
        [
          "word",
          "object",
          false
        ],
        [
          "word",
          "property",
          false
        ],
        [
          "word",
          "queryable",
          false
        ],
        [
          "word",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"characters\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: characters, unknown: True, value: characters, word: characters})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 4\n   *0. is/1  (3, 0) - \"characters are countable\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 23}\n                                           text: \"characters\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"characters\"\n                                           word: \"characters\"\n                                         }\n\n                                     range: {'start': 0, 'end': 23}\n                                     text: \"characters are countable\"\n                                     two:                                          {\n                                           prioritized_by: [('countable', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 15, 'end': 23}\n                                           text: \"countable\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: \"countable\"\n                                           word: \"countable\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 23}, text: characters, types: ['unknown'], unknown: True, value: characters, word: characters}), range: {'start': 0, 'end': 23}, text: characters are countable, two: Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, types: ['countable'], value: countable, word: countable}), word: are})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/2 (dead) (4, 0) - \"characters are countable\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 23}\n                                           text: \"characters\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"characters\"\n                                           word: \"characters\"\n                                         }\n\n                                     range: {'start': 0, 'end': 23}\n                                     text: \"characters are countable\"\n                                     two:                                          {\n                                           prioritized_by: [('countable', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 15, 'end': 23}\n                                           text: \"countable\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: \"countable\"\n                                           word: \"countable\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "characters are countable",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 23
          },
          "one": {
            "number": "many",
            "value": "characters",
            "unknown": true,
            "text": "characters",
            "marker": "unknown",
            "word": "characters",
            "range": {
              "start": 0,
              "end": 23
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "countable",
            "value": "countable",
            "default": true,
            "text": "countable",
            "word": "countable",
            "range": {
              "start": 15,
              "end": 23
            },
            "dead": true,
            "types": [
              "countable"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "characters are countable"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "characters are countable",
      "key": {
        "query": "characters are countable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "character",
          "countable",
          false
        ],
        [
          "character",
          "hierarchyAble",
          false
        ],
        [
          "character",
          "isEdee",
          false
        ],
        [
          "character",
          "isEder",
          false
        ],
        [
          "character",
          "object",
          false
        ],
        [
          "character",
          "property",
          false
        ],
        [
          "character",
          "queryable",
          false
        ],
        [
          "character",
          "theAble",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word",
          "countable",
          false
        ],
        [
          "word",
          "hierarchyAble",
          false
        ],
        [
          "word",
          "isEdee",
          false
        ],
        [
          "word",
          "isEder",
          false
        ],
        [
          "word",
          "object",
          false
        ],
        [
          "word",
          "property",
          false
        ],
        [
          "word",
          "queryable",
          false
        ],
        [
          "word",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"paragraphs\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: paragraphs, unknown: True, value: paragraphs, word: paragraphs})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 4\n   *0. is/1  (3, 0) - \"paragraphs are countable\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 23}\n                                           text: \"paragraphs\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"paragraphs\"\n                                           word: \"paragraphs\"\n                                         }\n\n                                     range: {'start': 0, 'end': 23}\n                                     text: \"paragraphs are countable\"\n                                     two:                                          {\n                                           prioritized_by: [('countable', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 15, 'end': 23}\n                                           text: \"countable\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: \"countable\"\n                                           word: \"countable\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 23}, text: paragraphs, types: ['unknown'], unknown: True, value: paragraphs, word: paragraphs}), range: {'start': 0, 'end': 23}, text: paragraphs are countable, two: Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, types: ['countable'], value: countable, word: countable}), word: are})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/2 (dead) (4, 0) - \"paragraphs are countable\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 23}\n                                           text: \"paragraphs\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"paragraphs\"\n                                           word: \"paragraphs\"\n                                         }\n\n                                     range: {'start': 0, 'end': 23}\n                                     text: \"paragraphs are countable\"\n                                     two:                                          {\n                                           prioritized_by: [('countable', 0)]\n                                           dead: true\n                                           default: true\n                                           marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 15, 'end': 23}\n                                           text: \"countable\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: \"countable\"\n                                           word: \"countable\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "paragraphs are countable",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 23
          },
          "one": {
            "number": "many",
            "value": "paragraphs",
            "unknown": true,
            "text": "paragraphs",
            "marker": "unknown",
            "word": "paragraphs",
            "range": {
              "start": 0,
              "end": 23
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "countable",
            "value": "countable",
            "default": true,
            "text": "countable",
            "word": "countable",
            "range": {
              "start": 15,
              "end": 23
            },
            "dead": true,
            "types": [
              "countable"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "paragraphs are countable"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "paragraphs are countable",
      "key": {
        "query": "paragraphs are countable"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ]
  ],
  "learned_contextual_priorities": []
}