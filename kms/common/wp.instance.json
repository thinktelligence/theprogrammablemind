{
  "configs": [
    "setidsuffix _wp",
    "words are countable orderable and statefulElements",
    "characters are countable orderable and statefulElements",
    "paragraphs are countable orderable and statefulElement",
    "text is a statefulElement",
    "letters means characters",
    "bold, italic, code, capitalize, lowercase and underline are styles",
    "underlined means underline",
    "capitalized means capitalize",
    "uppercase means capitalize",
    "italicize means italic",
    "italicized means italic",
    "uppercased, lowercased, capitalized, bolded, italicized and underlined are styleModifiers",
    "resetIdSuffix",
    {
      "operators": [
        "([changeState_wp|make] ([statefulElement_wp]) ([stateValue_wp|]))",
        "((style_wp/*) [applyStyle_wp] ([statefulElement_wp|]))",
        "((word_wp/*) [wordComparisonWith_wp] ([comparisonWith_wp|with] (a/0)? (letters)))",
        "((word_wp/*) [wordComparison_wp] (a/0)? (letters))",
        "((styleModifier_wp/*) [modifiedByStyle_wp] (statefulElement_wp/* && context.determiner == undefined))"
      ],
      "bridges": [
        {
          "id": "modifiedByStyle_wp",
          "parents": [
            "adjective"
          ],
          "convolution": true,
          "bridge": "{ ...after[0], style: before[0], target: after[0], generate: ['style', 'target'], conditions: append(after[0].conditions, [before[0]]) }"
        },
        {
          "id": "wordComparisonWith_wp",
          "parents": [
            "verb"
          ],
          "words": [
            {
              "word": "start",
              "comparison": "prefix"
            },
            {
              "word": "starts",
              "comparison": "prefix"
            },
            {
              "word": "end",
              "comparison": "suffix"
            },
            {
              "word": "ends",
              "comparison": "suffix"
            }
          ],
          "bridge": "{ ...next(operator), element: before[0], subject: before[0], letters: after[0], verb: operator, generate: ['element', 'verb', 'letters'] }"
        },
        {
          "id": "wordComparison_wp",
          "parents": [
            "verb"
          ],
          "words": [
            {
              "word": "contain",
              "comparison": "include"
            },
            {
              "word": "contains",
              "comparison": "include"
            },
            {
              "word": "include",
              "comparison": "include"
            },
            {
              "word": "includes",
              "comparison": "include"
            }
          ],
          "optional": {
            "1": "{ marker: 'a' }"
          },
          "bridge": "{ ...next(operator), element: before[0], subject: before[0], letters: after[1], verb: operator, generate: ['element', 'verb', 'letters'] }"
        },
        {
          "id": "comparisonWith_wp",
          "parents": [
            "preposition"
          ],
          "optional": {
            "1": "{ marker: 'a' }"
          },
          "bridge": "{ ...next(operator), operator: operator, letters: after[1], generate: ['operator', 'letters'] }"
        },
        {
          "id": "applyStyle_wp",
          "parents": [
            "verb"
          ],
          "convolution": true,
          "bridge": "{ ...next(operator), element: after[0], state: before[0], operator: operator, generate: ['state', 'element'] }",
          "localHierarchy": [
            [
              "thisitthat",
              "statefulElement_wp"
            ],
            [
              "everything",
              "statefulElement_wp"
            ]
          ],
          "semantic": "(args) => {\n            changeState({...args, element: args.context.element, state: args.context.state})\n          }"
        },
        {
          "id": "changeState_wp",
          "parents": [
            "verb"
          ],
          "bridge": "{ ...next(operator), element: after[0], state: after[1], operator: operator, generate: ['operator', 'element', 'state'] }",
          "localHierarchy": [
            [
              "thisitthat",
              "statefulElement_wp"
            ],
            [
              "everything",
              "statefulElement_wp"
            ]
          ],
          "semantic": "(args) => {\n            changeState({...args, element: args.context.element, state: args.context.state})\n          }"
        },
        {
          "id": "stateValue_wp",
          "children": [
            "color_colors",
            "style_wp"
          ]
        }
      ],
      "semantics": [
        {
          "match": "({context, isA}) => isA(context, 'style_wp') && !context.same && !context.isResponse && !context.evaluate",
          "apply": "({context, api, isA, toArray}) => {\n            const update = { scope: 'selection' }\n            setUpdate(isA, update, toArray(context))\n            api.changeState(update)\n          }"
        },
        {
          "match": "({context, isA}) => isA(context, 'statefulElement_wp') && !context.same && !context.isResponse && !context.evaluate",
          "apply": "({context, api, isA, toArray}) => {\n            const unit = root(context.marker)\n            let scope\n            if (context.quantity) {\n              scope = context.quantity.quantity\n            }\n            // TODO set default scope for \"every word bold underlined etc\"\n          }"
        }
      ],
      "priorities": [
        {
          "context": [
            [
              "changeState_wp",
              0
            ],
            [
              "statefulElement_wp",
              0
            ],
            [
              "list",
              0
            ]
          ],
          "ordered": true,
          "choose": [
            0
          ]
        },
        {
          "context": [
            [
              "comparisonWith_wp",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "list",
              1
            ]
          ],
          "ordered": true,
          "choose": [
            0
          ]
        }
      ]
    }
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "setIdSuffix",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "setIdSuffix",
              0
            ],
            "ops": [
              [
                "setIdSuffix",
                0
              ]
            ],
            "counter": 2
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "marker": "setIdSuffix",
          "value": "setIdSuffix",
          "default": true,
          "text": "setidsuffix _wp",
          "word": "setidsuffix",
          "range": {
            "start": 0,
            "end": 14
          },
          "dead": true,
          "suffix": {
            "value": "_wp",
            "unknown": true,
            "text": "_wp",
            "marker": "unknown",
            "word": "_wp",
            "range": {
              "start": 12,
              "end": 14
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2",
            "instance0#wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "setidsuffix _wp"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "setIdSuffix",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "setIdSuffix",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "setidsuffix _wp",
      "key": {
        "query": "setidsuffix _wp"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "orderable",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 8
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"words\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 28}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 32}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    5. unknown/0  (1, 19) - \"statefulelements\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 34, 'end': 49}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     unknown: true\n                                     value: \"statefulelements\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: words, unknown: True, value: words, word: words})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 28}\n                                     text: \"orderable\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 30, 'end': 32}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. unknown/0  (1, 19) - \"statefulelements\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 34, 'end': 49}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"statefulelements\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 49}, raw_text: statefulElements, text: statefulelements, types: ['queryable'], unknown: True, value: statefulelements, word: statefulelements})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 28}\n                                     text: \"orderable\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 30, 'end': 32}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n   *5. unknown/1 (dead) (2, 1) - \"statefulelements\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 34, 'end': 49}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"statefulelements\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 18}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. countable/1 (dead) (2, 2) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 28}\n                                     text: \"orderable\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 30, 'end': 32}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. unknown/1 (dead) (2, 1) - \"statefulelements\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 34, 'end': 49}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"statefulelements\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 28}, text: orderable, types: ['queryable'], value: orderable, word: orderable})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/1 (dead) (2, 2) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n   *3. orderable/1 (dead) (2, 3) - \"orderable\"\n                                   {\n                                     prioritized_by: [('orderable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 28}\n                                     text: \"orderable\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 30, 'end': 32}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. unknown/1 (dead) (2, 1) - \"statefulelements\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 34, 'end': 49}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"statefulelements\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 30, 'end': 32}, text: and, types: ['queryable'], word: and})\n\n>>>>>>>>>>>>> Counter 6\n    0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/1 (dead) (2, 2) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 18}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n   *3. list/1  (3, 0) - \"orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 20, 'end': 49}\n                                     text: \"orderable and statefulelements\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('orderable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 20, 'end': 28}\n                                         text: \"orderable\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         value: \"orderable\"\n                                         word: \"orderable\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 34, 'end': 49}\n                                         raw_text: \"statefulElements\"\n                                         text: \"statefulelements\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"statefulelements\"\n                                         word: \"statefulelements\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 20, 'end': 49}, text: orderable and statefulelements, types: ['queryable'], value: [Context({dead: True, default: True, marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 28}, text: orderable, types: ['queryable'], value: orderable, word: orderable}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 49}, raw_text: statefulElements, text: statefulelements, types: ['queryable'], unknown: True, value: statefulelements, word: statefulelements})], word: and})\n\n>>>>>>>>>>>>> Counter 7\n    0. unknown/1 (dead) (2, 0) - \"words\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"words\"\n                                     unknown: true\n                                     value: \"words\"\n                                     word: \"words\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. list/1  (4, 0) - \"countable orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 10, 'end': 49}\n                                     text: \"countable orderable and statefulelements\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('countable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 10, 'end': 18}\n                                         text: \"countable\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         value: \"countable\"\n                                         word: \"countable\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('orderable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 20, 'end': 28}\n                                         text: \"orderable\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         value: \"orderable\"\n                                         word: \"orderable\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 34, 'end': 49}\n                                         raw_text: \"statefulElements\"\n                                         text: \"statefulelements\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"statefulelements\"\n                                         word: \"statefulelements\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 6, 'end': 8}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  (5, 0) - \"words are countable orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 49}\n                                           text: \"words\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"words\"\n                                           word: \"words\"\n                                         }\n\n                                     range: {'start': 0, 'end': 49}\n                                     text: \"words are countable orderable and statefulelements\"\n                                     two:                                          {\n                                           prioritized_by: [('list', 1)]\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                           range: {'start': 10, 'end': 49}\n                                           text: \"countable orderable and statefulelements\"\n                                           types: [\n                                           'queryable'\n,                                            'countable'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('countable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 10, 'end': 18}\n                                               text: \"countable\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               value: \"countable\"\n                                               word: \"countable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('orderable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 20, 'end': 28}\n                                               text: \"orderable\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               value: \"orderable\"\n                                               word: \"orderable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('unknown', 0)]\n                                               dead: true\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 34, 'end': 49}\n                                               raw_text: \"statefulElements\"\n                                               text: \"statefulelements\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"statefulelements\"\n                                               word: \"statefulelements\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 49}, text: words, types: ['unknown'], unknown: True, value: words, word: words}), range: {'start': 0, 'end': 49}, text: words are countable orderable and statefulelements, two: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 10, 'end': 49}, text: countable orderable and statefulelements, types: ['queryable', 'countable'], value: [Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 18}, text: countable, types: ['queryable'], value: countable, word: countable}), Context({dead: True, default: True, marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 28}, text: orderable, types: ['queryable'], value: orderable, word: orderable}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 49}, raw_text: statefulElements, text: statefulelements, types: ['queryable'], unknown: True, value: statefulelements, word: statefulelements})], word: and}), word: are})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2 (dead) (6, 0) - \"words are countable orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 49}\n                                           text: \"words\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"words\"\n                                           word: \"words\"\n                                         }\n\n                                     range: {'start': 0, 'end': 49}\n                                     text: \"words are countable orderable and statefulelements\"\n                                     two:                                          {\n                                           prioritized_by: [('list', 1)]\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                           range: {'start': 10, 'end': 49}\n                                           text: \"countable orderable and statefulelements\"\n                                           types: [\n                                           'queryable'\n,                                            'countable'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('countable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 10, 'end': 18}\n                                               text: \"countable\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               value: \"countable\"\n                                               word: \"countable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('orderable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 20, 'end': 28}\n                                               text: \"orderable\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               value: \"orderable\"\n                                               word: \"orderable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('unknown', 0)]\n                                               dead: true\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 34, 'end': 49}\n                                               raw_text: \"statefulElements\"\n                                               text: \"statefulelements\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"statefulelements\"\n                                               word: \"statefulelements\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "words are countable orderable and statefulelements",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 49
          },
          "one": {
            "number": "many",
            "value": "words",
            "unknown": true,
            "text": "words",
            "marker": "unknown",
            "word": "words",
            "range": {
              "start": 0,
              "end": 49
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "countable orderable and statefulelements",
            "range": {
              "start": 10,
              "end": 49
            },
            "types": [
              "countable",
              "list",
              "queryable"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "countable",
                "value": "countable",
                "default": true,
                "text": "countable",
                "word": "countable",
                "range": {
                  "start": 10,
                  "end": 18
                },
                "dead": true,
                "types": [
                  "countable",
                  "queryable"
                ],
                "level": 1
              },
              {
                "marker": "orderable",
                "value": "orderable",
                "default": true,
                "text": "orderable",
                "word": "orderable",
                "range": {
                  "start": 20,
                  "end": 28
                },
                "types": [
                  "orderable",
                  "queryable"
                ],
                "dead": true,
                "level": 1
              },
              {
                "value": "statefulelements",
                "unknown": true,
                "text": "statefulelements",
                "marker": "unknown",
                "word": "statefulelements",
                "raw_text": "statefulElements",
                "range": {
                  "start": 34,
                  "end": 49
                },
                "types": [
                  "queryable",
                  "unknown"
                ],
                "dead": true,
                "level": 1
              }
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2",
            "instance0#wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "words are countable, orderable and statefulelements"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "words are countable orderable and statefulElements",
      "key": {
        "query": "words are countable orderable and statefulElements"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "statefulElement_wp",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "orderable",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 7
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"characters\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 21) - \"statefulelements\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 39, 'end': 54}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: characters, unknown: True, value: characters, word: characters})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 21) - \"statefulelements\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 39, 'end': 54}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 21) - \"statefulelements\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 39, 'end': 54}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 33}, text: orderable, value: orderable, word: orderable})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n   *3. orderable/1 (dead) (2, 2) - \"orderable\"\n                                   {\n                                     prioritized_by: [('orderable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 21) - \"statefulelements\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 39, 'end': 54}\n                                     raw_text: \"statefulElements\"\n                                     text: \"statefulelements\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelements\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge)), range: {'start': 35, 'end': 37}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n   *3. list/1  (3, 0) - \"orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 25, 'end': 54}\n                                     text: \"orderable and statefulelements\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('orderable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 25, 'end': 33}\n                                         text: \"orderable\"\n                                         value: \"orderable\"\n                                         word: \"orderable\"\n                                       }\n\n                                       {\n                                         marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                         number: \"many\"\n                                         range: {'start': 39, 'end': 54}\n                                         raw_text: \"statefulElements\"\n                                         text: \"statefulelements\"\n                                         value: \"statefulElement_wp\"\n                                         word: \"statefulelements\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge)), range: {'start': 25, 'end': 54}, text: orderable and statefulelements, types: [], value: [Context({dead: True, default: True, marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 25, 'end': 33}, text: orderable, value: orderable, word: orderable}), Context({marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge)), number: many, range: {'start': 39, 'end': 54}, raw_text: statefulElements, text: statefulelements, value: statefulElement_wp, word: statefulelements})], word: and})\n\n>>>>>>>>>>>>> Counter 6\n    0. unknown/1 (dead) (2, 0) - \"characters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"characters\"\n                                     unknown: true\n                                     value: \"characters\"\n                                     word: \"characters\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. list/1  (4, 0) - \"countable orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 15, 'end': 54}\n                                     text: \"countable orderable and statefulelements\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('countable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 15, 'end': 23}\n                                         text: \"countable\"\n                                         value: \"countable\"\n                                         word: \"countable\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('orderable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 25, 'end': 33}\n                                         text: \"orderable\"\n                                         value: \"orderable\"\n                                         word: \"orderable\"\n                                       }\n\n                                       {\n                                         marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                         number: \"many\"\n                                         range: {'start': 39, 'end': 54}\n                                         raw_text: \"statefulElements\"\n                                         text: \"statefulelements\"\n                                         value: \"statefulElement_wp\"\n                                         word: \"statefulelements\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 7\n   *0. is/1  (5, 0) - \"characters are countable orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 54}\n                                           text: \"characters\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"characters\"\n                                           word: \"characters\"\n                                         }\n\n                                     range: {'start': 0, 'end': 54}\n                                     text: \"characters are countable orderable and statefulelements\"\n                                     two:                                          {\n                                           prioritized_by: [('list', 1)]\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                           range: {'start': 15, 'end': 54}\n                                           text: \"countable orderable and statefulelements\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('countable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 15, 'end': 23}\n                                               text: \"countable\"\n                                               value: \"countable\"\n                                               word: \"countable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('orderable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 25, 'end': 33}\n                                               text: \"orderable\"\n                                               value: \"orderable\"\n                                               word: \"orderable\"\n                                             }\n\n                                             {\n                                               marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                               number: \"many\"\n                                               range: {'start': 39, 'end': 54}\n                                               raw_text: \"statefulElements\"\n                                               text: \"statefulelements\"\n                                               value: \"statefulElement_wp\"\n                                               word: \"statefulelements\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 54}, text: characters, types: ['unknown'], unknown: True, value: characters, word: characters}), range: {'start': 0, 'end': 54}, text: characters are countable orderable and statefulelements, two: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge)), range: {'start': 15, 'end': 54}, text: countable orderable and statefulelements, types: ['countable'], value: [Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, value: countable, word: countable}), Context({dead: True, default: True, marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 25, 'end': 33}, text: orderable, value: orderable, word: orderable}), Context({marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge)), number: many, range: {'start': 39, 'end': 54}, raw_text: statefulElements, text: statefulelements, value: statefulElement_wp, word: statefulelements})], word: and}), word: are})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/2 (dead) (6, 0) - \"characters are countable orderable and statefulelements\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 54}\n                                           text: \"characters\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"characters\"\n                                           word: \"characters\"\n                                         }\n\n                                     range: {'start': 0, 'end': 54}\n                                     text: \"characters are countable orderable and statefulelements\"\n                                     two:                                          {\n                                           prioritized_by: [('list', 1)]\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                           range: {'start': 15, 'end': 54}\n                                           text: \"countable orderable and statefulelements\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('countable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 15, 'end': 23}\n                                               text: \"countable\"\n                                               value: \"countable\"\n                                               word: \"countable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('orderable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 25, 'end': 33}\n                                               text: \"orderable\"\n                                               value: \"orderable\"\n                                               word: \"orderable\"\n                                             }\n\n                                             {\n                                               marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                               number: \"many\"\n                                               range: {'start': 39, 'end': 54}\n                                               raw_text: \"statefulElements\"\n                                               text: \"statefulelements\"\n                                               value: \"statefulElement_wp\"\n                                               word: \"statefulelements\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "characters are countable orderable and statefulelements",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 54
          },
          "one": {
            "number": "many",
            "value": "characters",
            "unknown": true,
            "text": "characters",
            "marker": "unknown",
            "word": "characters",
            "range": {
              "start": 0,
              "end": 54
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "countable orderable and statefulelements",
            "range": {
              "start": 15,
              "end": 54
            },
            "types": [
              "countable",
              "list"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "countable",
                "value": "countable",
                "default": true,
                "text": "countable",
                "word": "countable",
                "range": {
                  "start": 15,
                  "end": 23
                },
                "dead": true,
                "level": 1
              },
              {
                "marker": "orderable",
                "value": "orderable",
                "default": true,
                "text": "orderable",
                "word": "orderable",
                "range": {
                  "start": 25,
                  "end": 33
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "statefulElement_wp",
                "number": "many",
                "text": "statefulelements",
                "marker": "statefulElement_wp",
                "word": "statefulelements",
                "raw_text": "statefulElements",
                "range": {
                  "start": 39,
                  "end": 54
                },
                "level": 0
              }
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "characters are countable, orderable and statefulelements"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "characters are countable orderable and statefulElements",
      "key": {
        "query": "characters are countable orderable and statefulElements"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "statefulElement_wp",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "countable",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "orderable",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "orderable",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 7
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"paragraphs\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 20) - \"statefulelement\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 39, 'end': 53}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: paragraphs, unknown: True, value: paragraphs, word: paragraphs})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/0  (1, 8) - \"countable\"\n                                   {\n                                     default: true\n                                     marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 20) - \"statefulelement\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 39, 'end': 53}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n    3. orderable/0  (1, 12) - \"orderable\"\n                                   {\n                                     default: true\n                                     marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 20) - \"statefulelement\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 39, 'end': 53}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(orderable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 33}, text: orderable, value: orderable, word: orderable})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n   *3. orderable/1 (dead) (2, 2) - \"orderable\"\n                                   {\n                                     prioritized_by: [('orderable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 25, 'end': 33}\n                                     text: \"orderable\"\n                                     value: \"orderable\"\n                                     word: \"orderable\"\n                                   }\n    4. list/0  (1, 16) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 35, 'end': 37}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. statefulElement_wp/0  (1, 20) - \"statefulelement\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 39, 'end': 53}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge)), range: {'start': 35, 'end': 37}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. countable/1 (dead) (2, 1) - \"countable\"\n                                   {\n                                     prioritized_by: [('countable', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 15, 'end': 23}\n                                     text: \"countable\"\n                                     value: \"countable\"\n                                     word: \"countable\"\n                                   }\n   *3. list/1  (3, 0) - \"orderable and statefulelement\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 25, 'end': 53}\n                                     text: \"orderable and statefulelement\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('orderable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 25, 'end': 33}\n                                         text: \"orderable\"\n                                         value: \"orderable\"\n                                         word: \"orderable\"\n                                       }\n\n                                       {\n                                         marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 39, 'end': 53}\n                                         raw_text: \"statefulElement\"\n                                         text: \"statefulelement\"\n                                         value: \"statefulElement_wp\"\n                                         word: \"statefulelement\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge)), range: {'start': 25, 'end': 53}, text: orderable and statefulelement, types: [], value: [Context({dead: True, default: True, marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 25, 'end': 33}, text: orderable, value: orderable, word: orderable}), Context({marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 39, 'end': 53}, raw_text: statefulElement, text: statefulelement, value: statefulElement_wp, word: statefulelement})], word: and})\n\n>>>>>>>>>>>>> Counter 6\n    0. unknown/1 (dead) (2, 0) - \"paragraphs\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"paragraphs\"\n                                     unknown: true\n                                     value: \"paragraphs\"\n                                     word: \"paragraphs\"\n                                   }\n    1. is/0  (1, 3) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 11, 'end': 13}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. list/1  (4, 0) - \"countable orderable and statefulelement\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                     range: {'start': 15, 'end': 53}\n                                     text: \"countable orderable and statefulelement\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('countable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 15, 'end': 23}\n                                         text: \"countable\"\n                                         value: \"countable\"\n                                         word: \"countable\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('orderable', 0)]\n                                         dead: true\n                                         default: true\n                                         marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 25, 'end': 33}\n                                         text: \"orderable\"\n                                         value: \"orderable\"\n                                         word: \"orderable\"\n                                       }\n\n                                       {\n                                         marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 39, 'end': 53}\n                                         raw_text: \"statefulElement\"\n                                         text: \"statefulelement\"\n                                         value: \"statefulElement_wp\"\n                                         word: \"statefulelement\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 7\n   *0. is/1  (5, 0) - \"paragraphs are countable orderable and statefulelement\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 53}\n                                           text: \"paragraphs\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"paragraphs\"\n                                           word: \"paragraphs\"\n                                         }\n\n                                     range: {'start': 0, 'end': 53}\n                                     text: \"paragraphs are countable orderable and statefulelement\"\n                                     two:                                          {\n                                           prioritized_by: [('list', 1)]\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                           range: {'start': 15, 'end': 53}\n                                           text: \"countable orderable and statefulelement\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('countable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 15, 'end': 23}\n                                               text: \"countable\"\n                                               value: \"countable\"\n                                               word: \"countable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('orderable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 25, 'end': 33}\n                                               text: \"orderable\"\n                                               value: \"orderable\"\n                                               word: \"orderable\"\n                                             }\n\n                                             {\n                                               marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                               number: \"one\"\n                                               range: {'start': 39, 'end': 53}\n                                               raw_text: \"statefulElement\"\n                                               text: \"statefulelement\"\n                                               value: \"statefulElement_wp\"\n                                               word: \"statefulelement\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, text: paragraphs, types: ['unknown'], unknown: True, value: paragraphs, word: paragraphs}), range: {'start': 0, 'end': 53}, text: paragraphs are countable orderable and statefulelement, two: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge)), range: {'start': 15, 'end': 53}, text: countable orderable and statefulelement, types: ['countable'], value: [Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 15, 'end': 23}, text: countable, value: countable, word: countable}), Context({dead: True, default: True, marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 25, 'end': 33}, text: orderable, value: orderable, word: orderable}), Context({marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 39, 'end': 53}, raw_text: statefulElement, text: statefulelement, value: statefulElement_wp, word: statefulelement})], word: and}), word: are})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/2 (dead) (6, 0) - \"paragraphs are countable orderable and statefulelement\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 53}\n                                           text: \"paragraphs\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"paragraphs\"\n                                           word: \"paragraphs\"\n                                         }\n\n                                     range: {'start': 0, 'end': 53}\n                                     text: \"paragraphs are countable orderable and statefulelement\"\n                                     two:                                          {\n                                           prioritized_by: [('list', 1)]\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['isEder', 'theAble', 'hierarchyAble', 'object', 'statefulElement_wp', 'queryable', 'property', 'isEdee']}) bridge(bridge))\n                                           range: {'start': 15, 'end': 53}\n                                           text: \"countable orderable and statefulelement\"\n                                           types: [\n                                           'countable'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('countable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 15, 'end': 23}\n                                               text: \"countable\"\n                                               value: \"countable\"\n                                               word: \"countable\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('orderable', 0)]\n                                               dead: true\n                                               default: true\n                                               marker: Operator(orderable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 25, 'end': 33}\n                                               text: \"orderable\"\n                                               value: \"orderable\"\n                                               word: \"orderable\"\n                                             }\n\n                                             {\n                                               marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                               number: \"one\"\n                                               range: {'start': 39, 'end': 53}\n                                               raw_text: \"statefulElement\"\n                                               text: \"statefulelement\"\n                                               value: \"statefulElement_wp\"\n                                               word: \"statefulelement\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "paragraphs are countable orderable and statefulelement",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 53
          },
          "one": {
            "number": "many",
            "value": "paragraphs",
            "unknown": true,
            "text": "paragraphs",
            "marker": "unknown",
            "word": "paragraphs",
            "range": {
              "start": 0,
              "end": 53
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "countable orderable and statefulelement",
            "range": {
              "start": 15,
              "end": 53
            },
            "types": [
              "countable",
              "list"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "countable",
                "value": "countable",
                "default": true,
                "text": "countable",
                "word": "countable",
                "range": {
                  "start": 15,
                  "end": 23
                },
                "dead": true,
                "level": 1
              },
              {
                "marker": "orderable",
                "value": "orderable",
                "default": true,
                "text": "orderable",
                "word": "orderable",
                "range": {
                  "start": 25,
                  "end": 33
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "statefulElement_wp",
                "number": "one",
                "text": "statefulelement",
                "marker": "statefulElement_wp",
                "word": "statefulelement",
                "raw_text": "statefulElement",
                "range": {
                  "start": 39,
                  "end": 53
                },
                "level": 0
              }
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "paragraphs are countable, orderable and statefulelement"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "orderable",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "paragraphs are countable orderable and statefulElement",
      "key": {
        "query": "paragraphs are countable orderable and statefulElement"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "statefulElement_wp",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "statefulElement_wp",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "statefulElement_wp",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"text\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"text\"\n                                     unknown: true\n                                     value: \"text\"\n                                     word: \"text\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 6}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n    2. a/0  (1, 6) - \"a\"\n                                   {\n                                     default: true\n                                     marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                     range: {'start': 8, 'end': 8}\n                                     text: \"a\"\n                                     word: \"a\"\n                                   }\n    3. statefulElement_wp/0  (1, 10) - \"statefulelement\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 10, 'end': 24}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: text, unknown: True, value: text, word: text})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"text\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"text\"\n                                     unknown: true\n                                     value: \"text\"\n                                     word: \"text\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 6}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n    2. a/0  (1, 6) - \"a\"\n                                   {\n                                     default: true\n                                     marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                     range: {'start': 8, 'end': 8}\n                                     text: \"a\"\n                                     word: \"a\"\n                                   }\n    3. statefulElement_wp/0  (1, 10) - \"statefulelement\"\n                                   {\n                                     marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 10, 'end': 24}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(statefulElement_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'statefulElement_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'statefulElement_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 10, 'end': 24}, raw_text: statefulElement, text: statefulelement, value: statefulElement_wp, word: statefulelement})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"text\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"text\"\n                                     unknown: true\n                                     value: \"text\"\n                                     word: \"text\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 6}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n    2. a/0  (1, 6) - \"a\"\n                                   {\n                                     default: true\n                                     marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                     range: {'start': 8, 'end': 8}\n                                     text: \"a\"\n                                     word: \"a\"\n                                   }\n   *3. statefulElement_wp/1 (dead) (2, 1) - \"statefulelement\"\n                                   {\n                                     prioritized_by: [('statefulElement_wp', 0)]\n                                     dead: true\n                                     marker: Operator(statefulElement_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 10, 'end': 24}\n                                     raw_text: \"statefulElement\"\n                                     text: \"statefulelement\"\n                                     value: \"statefulElement_wp\"\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 8}, text: a, word: a})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"text\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"text\"\n                                     unknown: true\n                                     value: \"text\"\n                                     word: \"text\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 6}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n   *2. statefulElement_wp/1 (dead) (3, 0) - \"a statefulelement\"\n                                   {\n                                     prioritized_by: [('a', 0)]\n                                     concept: true\n                                     dead: true\n                                     determiner:                                          {\n                                           default: true\n                                           marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                           range: {'start': 8, 'end': 8}\n                                           text: \"a\"\n                                           word: \"a\"\n                                         }\n\n                                     instance: true\n                                     marker: Operator(statefulElement_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     modifiers: [\n                                     'determiner'\n                                     ]\n                                     number: \"one\"\n                                     pullFromContext: false\n                                     range: {'start': 8, 'end': 24}\n                                     raw_text: \"statefulElement\"\n                                     text: \"a statefulelement\"\n                                     types: [\n                                     'statefulElement_wp'\n                                     ]\n                                     value: \"statefulElement_wp\"\n                                     wantsValue: true\n                                     word: \"statefulelement\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/1  (4, 0) - \"text is a statefulelement\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 0, 'end': 24}\n                                           text: \"text\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"text\"\n                                           word: \"text\"\n                                         }\n\n                                     range: {'start': 0, 'end': 24}\n                                     text: \"text is a statefulelement\"\n                                     two:                                          {\n                                           prioritized_by: [('a', 0)]\n                                           concept: true\n                                           dead: true\n                                           determiner:                                                {\n                                                 default: true\n                                                 marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                                 range: {'start': 8, 'end': 8}\n                                                 text: \"a\"\n                                                 word: \"a\"\n                                               }\n\n                                           instance: true\n                                           marker: Operator(statefulElement_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           modifiers: [\n                                           'determiner'\n                                           ]\n                                           number: \"one\"\n                                           pullFromContext: false\n                                           range: {'start': 8, 'end': 24}\n                                           raw_text: \"statefulElement\"\n                                           text: \"a statefulelement\"\n                                           types: [\n                                           'statefulElement_wp'\n                                           ]\n                                           value: \"statefulElement_wp\"\n                                           wantsValue: true\n                                           word: \"statefulelement\"\n                                         }\n\n                                     word: \"is\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 24}, text: text, types: ['unknown'], unknown: True, value: text, word: text}), range: {'start': 0, 'end': 24}, text: text is a statefulelement, two: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 8}, text: a, word: a}), instance: True, marker: Operator(statefulElement_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 8, 'end': 24}, raw_text: statefulElement, text: a statefulelement, types: ['statefulElement_wp'], value: statefulElement_wp, wantsValue: True, word: statefulelement}), word: is})\n\n>>>>>>>>>>>>> Counter 6\n   *0. is/2 (dead) (5, 0) - \"text is a statefulelement\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 0, 'end': 24}\n                                           text: \"text\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"text\"\n                                           word: \"text\"\n                                         }\n\n                                     range: {'start': 0, 'end': 24}\n                                     text: \"text is a statefulelement\"\n                                     two:                                          {\n                                           prioritized_by: [('a', 0)]\n                                           concept: true\n                                           dead: true\n                                           determiner:                                                {\n                                                 default: true\n                                                 marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, instance: true, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                                 range: {'start': 8, 'end': 8}\n                                                 text: \"a\"\n                                                 word: \"a\"\n                                               }\n\n                                           instance: true\n                                           marker: Operator(statefulElement_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           modifiers: [\n                                           'determiner'\n                                           ]\n                                           number: \"one\"\n                                           pullFromContext: false\n                                           range: {'start': 8, 'end': 24}\n                                           raw_text: \"statefulElement\"\n                                           text: \"a statefulelement\"\n                                           types: [\n                                           'statefulElement_wp'\n                                           ]\n                                           value: \"statefulElement_wp\"\n                                           wantsValue: true\n                                           word: \"statefulelement\"\n                                         }\n\n                                     word: \"is\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "one",
          "text": "text is a statefulelement",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 24
          },
          "one": {
            "number": "one",
            "value": "text",
            "unknown": true,
            "text": "text",
            "marker": "unknown",
            "word": "text",
            "range": {
              "start": 0,
              "end": 24
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "value": "statefulElement_wp",
            "number": "one",
            "text": "a statefulelement",
            "marker": "statefulElement_wp",
            "word": "statefulelement",
            "raw_text": "statefulElement",
            "range": {
              "start": 8,
              "end": 24
            },
            "dead": true,
            "types": [
              "statefulElement_wp"
            ],
            "pullFromContext": false,
            "instance": true,
            "concept": true,
            "wantsValue": true,
            "determiner": {
              "marker": "a",
              "default": true,
              "word": "a",
              "text": "a",
              "range": {
                "start": 8,
                "end": 8
              },
              "level": 0
            },
            "modifiers": [
              "determiner"
            ],
            "level": 1
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "text is a statefulelement"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "statefulElement_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "text is a statefulElement",
      "key": {
        "query": "text is a statefulElement"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "character_wp",
                0
              ],
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "character_wp",
              0
            ],
            "ops": [
              [
                "character_wp",
                0
              ],
              [
                "means",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"letters\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 6}\n                                     text: \"letters\"\n                                     unknown: true\n                                     value: \"letters\"\n                                     word: \"letters\"\n                                   }\n    1. means/0  (1, 3) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 8, 'end': 12}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. character_wp/0  (1, 7) - \"characters\"\n                                   {\n                                     marker: Operator(character_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'character_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'character_wp' }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 14, 'end': 23}\n                                     text: \"characters\"\n                                     value: \"character_wp\"\n                                     word: \"characters\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: letters, unknown: True, value: letters, word: letters})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"letters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 6}\n                                     text: \"letters\"\n                                     unknown: true\n                                     value: \"letters\"\n                                     word: \"letters\"\n                                   }\n    1. means/0  (1, 3) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 8, 'end': 12}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. character_wp/0  (1, 7) - \"characters\"\n                                   {\n                                     marker: Operator(character_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'character_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'character_wp' }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 14, 'end': 23}\n                                     text: \"characters\"\n                                     value: \"character_wp\"\n                                     word: \"characters\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(character_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'character_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'character_wp' }')), variables({}) bridge(bridge)), number: many, range: {'start': 14, 'end': 23}, text: characters, value: character_wp, word: characters})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"letters\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 6}\n                                     text: \"letters\"\n                                     unknown: true\n                                     value: \"letters\"\n                                     word: \"letters\"\n                                   }\n    1. means/0  (1, 3) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 8, 'end': 12}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. character_wp/1 (dead) (2, 1) - \"characters\"\n                                   {\n                                     prioritized_by: [('character_wp', 0)]\n                                     dead: true\n                                     marker: Operator(character_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 14, 'end': 23}\n                                     text: \"characters\"\n                                     value: \"character_wp\"\n                                     word: \"characters\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 12}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1 (dead) (3, 0) - \"letters means characters\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 6}\n                                           text: \"letters\"\n                                           unknown: true\n                                           value: \"letters\"\n                                           word: \"letters\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 23}\n                                     text: \"letters means characters\"\n                                     to:                                          {\n                                           prioritized_by: [('character_wp', 0)]\n                                           dead: true\n                                           marker: Operator(character_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 14, 'end': 23}\n                                           text: \"characters\"\n                                           value: \"character_wp\"\n                                           word: \"characters\"\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "letters means characters",
          "word": "means",
          "range": {
            "start": 0,
            "end": 23
          },
          "dead": true,
          "from": {
            "value": "letters",
            "unknown": true,
            "text": "letters",
            "marker": "unknown",
            "word": "letters",
            "range": {
              "start": 0,
              "end": 6
            },
            "dead": true,
            "level": 1
          },
          "to": {
            "value": "character_wp",
            "number": "many",
            "text": "characters",
            "marker": "character_wp",
            "word": "characters",
            "range": {
              "start": 14,
              "end": 23
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "letters means characters"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "character_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "character_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "letters means characters",
      "key": {
        "query": "letters means characters"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 12
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 13
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 14
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 15
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 16
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 17
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 18
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"bold\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/0  (1, 4) - \"italic\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/0  (1, 7) - \"code\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 10) - \"capitalize\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/0  (1, 13) - \"lowercase\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    10. unknown/0  (1, 20) - \"underline\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: bold, unknown: True, value: bold, word: bold})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/0  (1, 4) - \"italic\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/0  (1, 7) - \"code\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 10) - \"capitalize\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/0  (1, 13) - \"lowercase\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. unknown/0  (1, 20) - \"underline\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 11}, text: italic, unknown: True, value: italic, word: italic})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/0  (1, 7) - \"code\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 10) - \"capitalize\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/0  (1, 13) - \"lowercase\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. unknown/0  (1, 20) - \"underline\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 17}, text: code, unknown: True, value: code, word: code})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *4. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 10) - \"capitalize\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/0  (1, 13) - \"lowercase\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. unknown/0  (1, 20) - \"underline\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=6) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 29}, text: capitalize, unknown: True, value: capitalize, word: capitalize})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *6. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/0  (1, 13) - \"lowercase\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. unknown/0  (1, 20) - \"underline\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=8) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 40}, text: lowercase, types: ['queryable'], unknown: True, value: lowercase, word: lowercase})\n\n>>>>>>>>>>>>> Counter 6\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *8. unknown/1 (dead) (2, 4) - \"lowercase\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. unknown/0  (1, 20) - \"underline\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=10) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 46, 'end': 54}, text: underline, types: ['queryable'], unknown: True, value: underline, word: underline})\n\n>>>>>>>>>>>>> Counter 7\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/1 (dead) (2, 4) - \"lowercase\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n   *10. unknown/1 (dead) (2, 5) - \"underline\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 27) - \"styles\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=12) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 60, 'end': 65}, text: styles, unknown: True, value: styles, word: styles})\n\n>>>>>>>>>>>>> Counter 8\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. unknown/1 (dead) (2, 4) - \"lowercase\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 32, 'end': 40}\n                                     text: \"lowercase\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"lowercase\"\n                                     word: \"lowercase\"\n                                   }\n    9. list/0  (1, 17) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 42, 'end': 44}\n                                     text: \"and\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. unknown/1 (dead) (2, 5) - \"underline\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 46, 'end': 54}\n                                     text: \"underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     unknown: true\n                                     value: \"underline\"\n                                     word: \"underline\"\n                                   }\n    11. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *12. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=9) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 42, 'end': 44}, text: and, types: ['queryable'], word: and})\n\n>>>>>>>>>>>>> Counter 9\n    0. unknown/1 (dead) (2, 0) - \"bold\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"bold\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. comma/0  (1, 1) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 4, 'end': 4}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    3. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    5. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    7. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *8. list/1  (3, 0) - \"lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 32, 'end': 54}\n                                     text: \"lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    9. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    10. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 4, 'end': 4}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 10\n   *0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. unknown/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 11}\n                                     text: \"italic\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    2. comma/0  (1, 5) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 12}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    3. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    4. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    5. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    6. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    7. list/1  (3, 0) - \"lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 32, 'end': 54}\n                                     text: \"lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    8. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    9. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 12}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 11\n    0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n   *1. unknown/1 (dead) (3, 2) - \"italic,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 12, 'end': 12}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 6, 'end': 12}\n                                     text: \"italic,\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    2. unknown/1 (dead) (2, 2) - \"code\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 17}\n                                     text: \"code\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    3. comma/0  (1, 8) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 18}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    5. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. list/1  (3, 0) - \"lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 32, 'end': 54}\n                                     text: \"lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    7. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    8. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 18}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 12\n    0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. unknown/1 (dead) (3, 2) - \"italic,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 12, 'end': 12}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 6, 'end': 12}\n                                     text: \"italic,\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n   *2. unknown/1 (dead) (3, 3) - \"code,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 18, 'end': 18}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 14, 'end': 18}\n                                     text: \"code,\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n    3. unknown/1 (dead) (2, 3) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 20, 'end': 29}\n                                     text: \"capitalize\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    4. comma/0  (1, 11) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 30, 'end': 30}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    5. list/1  (3, 0) - \"lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 32, 'end': 54}\n                                     text: \"lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    6. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    7. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 30}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 13\n    0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. unknown/1 (dead) (3, 2) - \"italic,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 12, 'end': 12}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 6, 'end': 12}\n                                     text: \"italic,\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    2. unknown/1 (dead) (3, 3) - \"code,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 18, 'end': 18}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 14, 'end': 18}\n                                     text: \"code,\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n   *3. unknown/1 (dead) (3, 4) - \"capitalize,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 30, 'end': 30}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 20, 'end': 30}\n                                     text: \"capitalize,\"\n                                     unknown: true\n                                     value: \"capitalize\"\n                                     word: \"capitalize\"\n                                   }\n    4. list/1  (3, 0) - \"lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 32, 'end': 54}\n                                     text: \"lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    6. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 32, 'end': 54}, text: lowercase and underline, types: ['queryable'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 40}, text: lowercase, types: ['queryable'], unknown: True, value: lowercase, word: lowercase}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 46, 'end': 54}, text: underline, types: ['queryable'], unknown: True, value: underline, word: underline})], word: and})\n\n>>>>>>>>>>>>> Counter 14\n    0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. unknown/1 (dead) (3, 2) - \"italic,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 12, 'end': 12}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 6, 'end': 12}\n                                     text: \"italic,\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n    2. unknown/1 (dead) (3, 3) - \"code,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 18, 'end': 18}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 14, 'end': 18}\n                                     text: \"code,\"\n                                     unknown: true\n                                     value: \"code\"\n                                     word: \"code\"\n                                   }\n   *3. list/1  (4, 0) - \"capitalize, lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 20, 'end': 54}\n                                     text: \"capitalize, lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 30, 'end': 30}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 20, 'end': 30}\n                                         text: \"capitalize,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"capitalize\"\n                                         word: \"capitalize\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    4. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    5. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 20, 'end': 54}, text: capitalize, lowercase and underline, types: ['queryable'], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 30}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 20, 'end': 30}, text: capitalize,, types: ['queryable'], unknown: True, value: capitalize, word: capitalize}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 40}, text: lowercase, types: ['queryable'], unknown: True, value: lowercase, word: lowercase}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 46, 'end': 54}, text: underline, types: ['queryable'], unknown: True, value: underline, word: underline})], word: and})\n\n>>>>>>>>>>>>> Counter 15\n    0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n    1. unknown/1 (dead) (3, 2) - \"italic,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 12, 'end': 12}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 6, 'end': 12}\n                                     text: \"italic,\"\n                                     unknown: true\n                                     value: \"italic\"\n                                     word: \"italic\"\n                                   }\n   *2. list/1  (5, 0) - \"code, capitalize, lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 14, 'end': 54}\n                                     text: \"code, capitalize, lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 18, 'end': 18}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 14, 'end': 18}\n                                         text: \"code,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"code\"\n                                         word: \"code\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 30, 'end': 30}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 20, 'end': 30}\n                                         text: \"capitalize,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"capitalize\"\n                                         word: \"capitalize\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    3. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    4. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 14, 'end': 54}, text: code, capitalize, lowercase and underline, types: ['queryable'], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 18}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 14, 'end': 18}, text: code,, types: ['queryable'], unknown: True, value: code, word: code}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 30}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 20, 'end': 30}, text: capitalize,, types: ['queryable'], unknown: True, value: capitalize, word: capitalize}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 40}, text: lowercase, types: ['queryable'], unknown: True, value: lowercase, word: lowercase}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 46, 'end': 54}, text: underline, types: ['queryable'], unknown: True, value: underline, word: underline})], word: and})\n\n>>>>>>>>>>>>> Counter 16\n    0. unknown/1 (dead) (3, 1) - \"bold,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 4, 'end': 4}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"bold,\"\n                                     unknown: true\n                                     value: \"bold\"\n                                     word: \"bold\"\n                                   }\n   *1. list/1  (6, 0) - \"italic, code, capitalize, lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 6, 'end': 54}\n                                     text: \"italic, code, capitalize, lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 12, 'end': 12}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 6, 'end': 12}\n                                         text: \"italic,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"italic\"\n                                         word: \"italic\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 18, 'end': 18}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 14, 'end': 18}\n                                         text: \"code,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"code\"\n                                         word: \"code\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 30, 'end': 30}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 20, 'end': 30}\n                                         text: \"capitalize,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"capitalize\"\n                                         word: \"capitalize\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    2. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    3. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), range: {'start': 6, 'end': 54}, text: italic, code, capitalize, lowercase and underline, types: ['queryable'], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 12}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 6, 'end': 12}, text: italic,, types: ['queryable'], unknown: True, value: italic, word: italic}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 18}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 14, 'end': 18}, text: code,, types: ['queryable'], unknown: True, value: code, word: code}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 30}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 20, 'end': 30}, text: capitalize,, types: ['queryable'], unknown: True, value: capitalize, word: capitalize}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 40}, text: lowercase, types: ['queryable'], unknown: True, value: lowercase, word: lowercase}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 46, 'end': 54}, text: underline, types: ['queryable'], unknown: True, value: underline, word: underline})], word: and})\n\n>>>>>>>>>>>>> Counter 17\n   *0. list/1  (7, 0) - \"bold, italic, code, capitalize, lowercase and underline\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                     range: {'start': 0, 'end': 54}\n                                     text: \"bold, italic, code, capitalize, lowercase and underline\"\n                                     types: [\n                                     'queryable'\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 4, 'end': 4}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 0, 'end': 4}\n                                         text: \"bold,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"bold\"\n                                         word: \"bold\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 12, 'end': 12}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 6, 'end': 12}\n                                         text: \"italic,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"italic\"\n                                         word: \"italic\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 18, 'end': 18}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 14, 'end': 18}\n                                         text: \"code,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"code\"\n                                         word: \"code\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 30, 'end': 30}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 20, 'end': 30}\n                                         text: \"capitalize,\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"capitalize\"\n                                         word: \"capitalize\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 32, 'end': 40}\n                                         text: \"lowercase\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"lowercase\"\n                                         word: \"lowercase\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('unknown', 0)]\n                                         dead: true\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 46, 'end': 54}\n                                         text: \"underline\"\n                                         types: [\n                                         'queryable'\n                                         ]\n                                         unknown: true\n                                         value: \"underline\"\n                                         word: \"underline\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    1. is/0  (1, 23) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. unknown/1 (dead) (2, 6) - \"styles\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 60, 'end': 65}\n                                     text: \"styles\"\n                                     unknown: true\n                                     value: \"styles\"\n                                     word: \"styles\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 56, 'end': 58}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 18\n   *0. is/1  (8, 0) - \"bold, italic, code, capitalize, lowercase and underline are styles\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 65}\n                                           text: \"bold, italic, code, capitalize, lowercase and underline\"\n                                           types: [\n                                           'queryable'\n,                                            'unknown'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 4, 'end': 4}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 0, 'end': 4}\n                                               text: \"bold,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"bold\"\n                                               word: \"bold\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 12, 'end': 12}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 6, 'end': 12}\n                                               text: \"italic,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"italic\"\n                                               word: \"italic\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 18, 'end': 18}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 14, 'end': 18}\n                                               text: \"code,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"code\"\n                                               word: \"code\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 30, 'end': 30}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 20, 'end': 30}\n                                               text: \"capitalize,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"capitalize\"\n                                               word: \"capitalize\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('unknown', 0)]\n                                               dead: true\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 32, 'end': 40}\n                                               text: \"lowercase\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"lowercase\"\n                                               word: \"lowercase\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('unknown', 0)]\n                                               dead: true\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 46, 'end': 54}\n                                               text: \"underline\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"underline\"\n                                               word: \"underline\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 65}\n                                     text: \"bold, italic, code, capitalize, lowercase and underline are styles\"\n                                     two:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 60, 'end': 65}\n                                           text: \"styles\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"styles\"\n                                           word: \"styles\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 65}, text: bold, italic, code, capitalize, lowercase and underline, types: ['queryable', 'unknown'], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 4, 'end': 4}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 0, 'end': 4}, text: bold,, types: ['queryable'], unknown: True, value: bold, word: bold}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 12}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 6, 'end': 12}, text: italic,, types: ['queryable'], unknown: True, value: italic, word: italic}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 18}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 14, 'end': 18}, text: code,, types: ['queryable'], unknown: True, value: code, word: code}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 30}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 20, 'end': 30}, text: capitalize,, types: ['queryable'], unknown: True, value: capitalize, word: capitalize}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 40}, text: lowercase, types: ['queryable'], unknown: True, value: lowercase, word: lowercase}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 46, 'end': 54}, text: underline, types: ['queryable'], unknown: True, value: underline, word: underline})], word: and}), range: {'start': 0, 'end': 65}, text: bold, italic, code, capitalize, lowercase and underline are styles, two: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 60, 'end': 65}, text: styles, types: ['unknown'], unknown: True, value: styles, word: styles}), word: are})\n\n>>>>>>>>>>>>> Counter 19\n   *0. is/2 (dead) (9, 0) - \"bold, italic, code, capitalize, lowercase and underline are styles\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'queryable', 'hierarchyAble']}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 65}\n                                           text: \"bold, italic, code, capitalize, lowercase and underline\"\n                                           types: [\n                                           'queryable'\n,                                            'unknown'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 4, 'end': 4}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 0, 'end': 4}\n                                               text: \"bold,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"bold\"\n                                               word: \"bold\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 12, 'end': 12}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 6, 'end': 12}\n                                               text: \"italic,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"italic\"\n                                               word: \"italic\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 18, 'end': 18}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 14, 'end': 18}\n                                               text: \"code,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"code\"\n                                               word: \"code\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 30, 'end': 30}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 20, 'end': 30}\n                                               text: \"capitalize,\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"capitalize\"\n                                               word: \"capitalize\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('unknown', 0)]\n                                               dead: true\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 32, 'end': 40}\n                                               text: \"lowercase\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"lowercase\"\n                                               word: \"lowercase\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('unknown', 0)]\n                                               dead: true\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 46, 'end': 54}\n                                               text: \"underline\"\n                                               types: [\n                                               'queryable'\n                                               ]\n                                               unknown: true\n                                               value: \"underline\"\n                                               word: \"underline\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 65}\n                                     text: \"bold, italic, code, capitalize, lowercase and underline are styles\"\n                                     two:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 60, 'end': 65}\n                                           text: \"styles\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"styles\"\n                                           word: \"styles\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "bold, italic, code, capitalize, lowercase and underline are styles",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 65
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "bold, italic, code, capitalize, lowercase and underline",
            "range": {
              "start": 0,
              "end": 65
            },
            "types": [
              "list",
              "queryable",
              "unknown"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "value": "bold",
                "unknown": true,
                "text": "bold,",
                "marker": "unknown",
                "word": "bold",
                "range": {
                  "start": 0,
                  "end": 4
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 4,
                      "end": 4
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "types": [
                  "queryable",
                  "unknown"
                ],
                "level": 1
              },
              {
                "value": "italic",
                "unknown": true,
                "text": "italic,",
                "marker": "unknown",
                "word": "italic",
                "range": {
                  "start": 6,
                  "end": 12
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 12,
                      "end": 12
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "types": [
                  "queryable",
                  "unknown"
                ],
                "level": 1
              },
              {
                "value": "code",
                "unknown": true,
                "text": "code,",
                "marker": "unknown",
                "word": "code",
                "range": {
                  "start": 14,
                  "end": 18
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 18,
                      "end": 18
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "types": [
                  "queryable",
                  "unknown"
                ],
                "level": 1
              },
              {
                "value": "capitalize",
                "unknown": true,
                "text": "capitalize,",
                "marker": "unknown",
                "word": "capitalize",
                "range": {
                  "start": 20,
                  "end": 30
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 30,
                      "end": 30
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "types": [
                  "queryable",
                  "unknown"
                ],
                "level": 1
              },
              {
                "value": "lowercase",
                "unknown": true,
                "text": "lowercase",
                "marker": "unknown",
                "word": "lowercase",
                "range": {
                  "start": 32,
                  "end": 40
                },
                "types": [
                  "queryable",
                  "unknown"
                ],
                "dead": true,
                "level": 1
              },
              {
                "value": "underline",
                "unknown": true,
                "text": "underline",
                "marker": "unknown",
                "word": "underline",
                "range": {
                  "start": 46,
                  "end": 54
                },
                "types": [
                  "queryable",
                  "unknown"
                ],
                "dead": true,
                "level": 1
              }
            ],
            "level": 1
          },
          "two": {
            "value": "styles",
            "unknown": true,
            "text": "styles",
            "marker": "unknown",
            "word": "styles",
            "range": {
              "start": 60,
              "end": 65
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "bold, italic, code, capitalize, lowercase and underline are styles"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "bold, italic, code, capitalize, lowercase and underline are styles",
      "key": {
        "query": "bold, italic, code, capitalize, lowercase and underline are styles"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "underline_wp",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "underline_wp",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "underline_wp",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 1) - \"underlined\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"underlined\"\n                                     unknown: true\n                                     value: \"underlined\"\n                                     word: \"underlined\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 11, 'end': 15}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. underline_wp/0  (1, 7) - \"underline\"\n                                   {\n                                     marker: Operator(underline_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 17, 'end': 25}\n                                     text: \"underline\"\n                                     value: \"underline_wp\"\n                                     word: \"underline\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: underlined, unknown: True, value: underlined, word: underlined})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"underlined\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"underlined\"\n                                     unknown: true\n                                     value: \"underlined\"\n                                     word: \"underlined\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 11, 'end': 15}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. underline_wp/0  (1, 7) - \"underline\"\n                                   {\n                                     marker: Operator(underline_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 17, 'end': 25}\n                                     text: \"underline\"\n                                     value: \"underline_wp\"\n                                     word: \"underline\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(underline_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 17, 'end': 25}, text: underline, value: underline_wp, word: underline})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"underlined\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"underlined\"\n                                     unknown: true\n                                     value: \"underlined\"\n                                     word: \"underlined\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 11, 'end': 15}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. underline_wp/1 (dead) (2, 1) - \"underline\"\n                                   {\n                                     prioritized_by: [('underline_wp', 0)]\n                                     dead: true\n                                     marker: Operator(underline_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 17, 'end': 25}\n                                     text: \"underline\"\n                                     value: \"underline_wp\"\n                                     word: \"underline\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 15}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1 (dead) (3, 0) - \"underlined means underline\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 9}\n                                           text: \"underlined\"\n                                           unknown: true\n                                           value: \"underlined\"\n                                           word: \"underlined\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 25}\n                                     text: \"underlined means underline\"\n                                     to:                                          {\n                                           prioritized_by: [('underline_wp', 0)]\n                                           dead: true\n                                           marker: Operator(underline_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 17, 'end': 25}\n                                           text: \"underline\"\n                                           value: \"underline_wp\"\n                                           word: \"underline\"\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "underlined means underline",
          "word": "means",
          "range": {
            "start": 0,
            "end": 25
          },
          "dead": true,
          "from": {
            "value": "underlined",
            "unknown": true,
            "text": "underlined",
            "marker": "unknown",
            "word": "underlined",
            "range": {
              "start": 0,
              "end": 9
            },
            "dead": true,
            "level": 1
          },
          "to": {
            "value": "underline_wp",
            "number": "one",
            "text": "underline",
            "marker": "underline_wp",
            "word": "underline",
            "range": {
              "start": 17,
              "end": 25
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "underlined means underline"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "means",
            0
          ],
          [
            "underline_wp",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "underline_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "underlined means underline",
      "key": {
        "query": "underlined means underline"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "isEdee",
          false
        ],
        [
          "underlined_wp",
          "isEder",
          false
        ],
        [
          "underlined_wp",
          "queryable",
          false
        ],
        [
          "underlined_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "underline_wp",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "capitalize_wp",
                0
              ],
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "capitalize_wp",
              0
            ],
            "ops": [
              [
                "capitalize_wp",
                0
              ],
              [
                "means",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 1) - \"capitalized\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"capitalized\"\n                                     unknown: true\n                                     value: \"capitalized\"\n                                     word: \"capitalized\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. capitalize_wp/0  (1, 7) - \"capitalize\"\n                                   {\n                                     marker: Operator(capitalize_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 18, 'end': 27}\n                                     text: \"capitalize\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalize\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 10}, text: capitalized, unknown: True, value: capitalized, word: capitalized})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"capitalized\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"capitalized\"\n                                     unknown: true\n                                     value: \"capitalized\"\n                                     word: \"capitalized\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. capitalize_wp/0  (1, 7) - \"capitalize\"\n                                   {\n                                     marker: Operator(capitalize_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 18, 'end': 27}\n                                     text: \"capitalize\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalize\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(capitalize_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 18, 'end': 27}, text: capitalize, value: capitalize_wp, word: capitalize})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"capitalized\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"capitalized\"\n                                     unknown: true\n                                     value: \"capitalized\"\n                                     word: \"capitalized\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. capitalize_wp/1 (dead) (2, 1) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('capitalize_wp', 0)]\n                                     dead: true\n                                     marker: Operator(capitalize_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 18, 'end': 27}\n                                     text: \"capitalize\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalize\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 16}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1 (dead) (3, 0) - \"capitalized means capitalize\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 10}\n                                           text: \"capitalized\"\n                                           unknown: true\n                                           value: \"capitalized\"\n                                           word: \"capitalized\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 27}\n                                     text: \"capitalized means capitalize\"\n                                     to:                                          {\n                                           prioritized_by: [('capitalize_wp', 0)]\n                                           dead: true\n                                           marker: Operator(capitalize_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 18, 'end': 27}\n                                           text: \"capitalize\"\n                                           value: \"capitalize_wp\"\n                                           word: \"capitalize\"\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "capitalized means capitalize",
          "word": "means",
          "range": {
            "start": 0,
            "end": 27
          },
          "dead": true,
          "from": {
            "value": "capitalized",
            "unknown": true,
            "text": "capitalized",
            "marker": "unknown",
            "word": "capitalized",
            "range": {
              "start": 0,
              "end": 10
            },
            "dead": true,
            "level": 1
          },
          "to": {
            "value": "capitalize_wp",
            "number": "one",
            "text": "capitalize",
            "marker": "capitalize_wp",
            "word": "capitalize",
            "range": {
              "start": 18,
              "end": 27
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "capitalized means capitalize"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "capitalize_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "capitalize_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "capitalized means capitalize",
      "key": {
        "query": "capitalized means capitalize"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "capitalized_wp",
          "capitalize_wp",
          false
        ],
        [
          "capitalized_wp",
          "isEdee",
          false
        ],
        [
          "capitalized_wp",
          "isEder",
          false
        ],
        [
          "capitalized_wp",
          "queryable",
          false
        ],
        [
          "capitalized_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "isEdee",
          false
        ],
        [
          "underlined_wp",
          "isEder",
          false
        ],
        [
          "underlined_wp",
          "queryable",
          false
        ],
        [
          "underlined_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "underline_wp",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "capitalize_wp",
                0
              ],
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "capitalize_wp",
              0
            ],
            "ops": [
              [
                "capitalize_wp",
                0
              ],
              [
                "means",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 1) - \"uppercase\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 8}\n                                     text: \"uppercase\"\n                                     unknown: true\n                                     value: \"uppercase\"\n                                     word: \"uppercase\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 14}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. capitalize_wp/0  (1, 7) - \"capitalize\"\n                                   {\n                                     marker: Operator(capitalize_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 16, 'end': 25}\n                                     text: \"capitalize\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalize\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 8}, text: uppercase, unknown: True, value: uppercase, word: uppercase})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"uppercase\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 8}\n                                     text: \"uppercase\"\n                                     unknown: true\n                                     value: \"uppercase\"\n                                     word: \"uppercase\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 14}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. capitalize_wp/0  (1, 7) - \"capitalize\"\n                                   {\n                                     marker: Operator(capitalize_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 16, 'end': 25}\n                                     text: \"capitalize\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalize\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(capitalize_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 16, 'end': 25}, text: capitalize, value: capitalize_wp, word: capitalize})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"uppercase\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 8}\n                                     text: \"uppercase\"\n                                     unknown: true\n                                     value: \"uppercase\"\n                                     word: \"uppercase\"\n                                   }\n    1. means/0  (1, 4) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 14}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. capitalize_wp/1 (dead) (2, 1) - \"capitalize\"\n                                   {\n                                     prioritized_by: [('capitalize_wp', 0)]\n                                     dead: true\n                                     marker: Operator(capitalize_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 16, 'end': 25}\n                                     text: \"capitalize\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalize\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 14}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1 (dead) (3, 0) - \"uppercase means capitalize\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 8}\n                                           text: \"uppercase\"\n                                           unknown: true\n                                           value: \"uppercase\"\n                                           word: \"uppercase\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 25}\n                                     text: \"uppercase means capitalize\"\n                                     to:                                          {\n                                           prioritized_by: [('capitalize_wp', 0)]\n                                           dead: true\n                                           marker: Operator(capitalize_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 16, 'end': 25}\n                                           text: \"capitalize\"\n                                           value: \"capitalize_wp\"\n                                           word: \"capitalize\"\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "uppercase means capitalize",
          "word": "means",
          "range": {
            "start": 0,
            "end": 25
          },
          "dead": true,
          "from": {
            "value": "uppercase",
            "unknown": true,
            "text": "uppercase",
            "marker": "unknown",
            "word": "uppercase",
            "range": {
              "start": 0,
              "end": 8
            },
            "dead": true,
            "level": 1
          },
          "to": {
            "value": "capitalize_wp",
            "number": "one",
            "text": "capitalize",
            "marker": "capitalize_wp",
            "word": "capitalize",
            "range": {
              "start": 16,
              "end": 25
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "uppercase means capitalize"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "capitalize_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "capitalize_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "uppercase means capitalize",
      "key": {
        "query": "uppercase means capitalize"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "capitalized_wp",
          "capitalize_wp",
          false
        ],
        [
          "capitalized_wp",
          "isEdee",
          false
        ],
        [
          "capitalized_wp",
          "isEder",
          false
        ],
        [
          "capitalized_wp",
          "queryable",
          false
        ],
        [
          "capitalized_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "isEdee",
          false
        ],
        [
          "underlined_wp",
          "isEder",
          false
        ],
        [
          "underlined_wp",
          "queryable",
          false
        ],
        [
          "underlined_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "underline_wp",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "uppercase_wp",
          "capitalize_wp",
          false
        ],
        [
          "uppercase_wp",
          "isEdee",
          false
        ],
        [
          "uppercase_wp",
          "isEder",
          false
        ],
        [
          "uppercase_wp",
          "queryable",
          false
        ],
        [
          "uppercase_wp",
          "theAble",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "italic_wp",
                0
              ],
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "italic_wp",
              0
            ],
            "ops": [
              [
                "italic_wp",
                0
              ],
              [
                "means",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 2) - \"italicize\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 8}\n                                     text: \"italicize\"\n                                     unknown: true\n                                     value: \"italicize\"\n                                     word: \"italicize\"\n                                   }\n    1. means/0  (1, 5) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 14}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. italic_wp/0  (1, 9) - \"italic\"\n                                   {\n                                     marker: Operator(italic_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 16, 'end': 21}\n                                     text: \"italic\"\n                                     value: \"italic_wp\"\n                                     word: \"italic\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 8}, text: italicize, unknown: True, value: italicize, word: italicize})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"italicize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 8}\n                                     text: \"italicize\"\n                                     unknown: true\n                                     value: \"italicize\"\n                                     word: \"italicize\"\n                                   }\n    1. means/0  (1, 5) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 14}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. italic_wp/0  (1, 9) - \"italic\"\n                                   {\n                                     marker: Operator(italic_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 16, 'end': 21}\n                                     text: \"italic\"\n                                     value: \"italic_wp\"\n                                     word: \"italic\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(italic_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 16, 'end': 21}, text: italic, value: italic_wp, word: italic})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"italicize\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 8}\n                                     text: \"italicize\"\n                                     unknown: true\n                                     value: \"italicize\"\n                                     word: \"italicize\"\n                                   }\n    1. means/0  (1, 5) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 14}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. italic_wp/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('italic_wp', 0)]\n                                     dead: true\n                                     marker: Operator(italic_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 16, 'end': 21}\n                                     text: \"italic\"\n                                     value: \"italic_wp\"\n                                     word: \"italic\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 14}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1 (dead) (3, 0) - \"italicize means italic\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 8}\n                                           text: \"italicize\"\n                                           unknown: true\n                                           value: \"italicize\"\n                                           word: \"italicize\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 21}\n                                     text: \"italicize means italic\"\n                                     to:                                          {\n                                           prioritized_by: [('italic_wp', 0)]\n                                           dead: true\n                                           marker: Operator(italic_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 16, 'end': 21}\n                                           text: \"italic\"\n                                           value: \"italic_wp\"\n                                           word: \"italic\"\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "italicize means italic",
          "word": "means",
          "range": {
            "start": 0,
            "end": 21
          },
          "dead": true,
          "from": {
            "value": "italicize",
            "unknown": true,
            "text": "italicize",
            "marker": "unknown",
            "word": "italicize",
            "range": {
              "start": 0,
              "end": 8
            },
            "dead": true,
            "level": 1
          },
          "to": {
            "value": "italic_wp",
            "number": "one",
            "text": "italic",
            "marker": "italic_wp",
            "word": "italic",
            "range": {
              "start": 16,
              "end": 21
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "italicize means italic"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "italic_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "italic_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "italicize means italic",
      "key": {
        "query": "italicize means italic"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "capitalized_wp",
          "capitalize_wp",
          false
        ],
        [
          "capitalized_wp",
          "isEdee",
          false
        ],
        [
          "capitalized_wp",
          "isEder",
          false
        ],
        [
          "capitalized_wp",
          "queryable",
          false
        ],
        [
          "capitalized_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "italicize_wp",
          "isEdee",
          false
        ],
        [
          "italicize_wp",
          "isEder",
          false
        ],
        [
          "italicize_wp",
          "italic_wp",
          false
        ],
        [
          "italicize_wp",
          "queryable",
          false
        ],
        [
          "italicize_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "isEdee",
          false
        ],
        [
          "underlined_wp",
          "isEder",
          false
        ],
        [
          "underlined_wp",
          "queryable",
          false
        ],
        [
          "underlined_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "underline_wp",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "uppercase_wp",
          "capitalize_wp",
          false
        ],
        [
          "uppercase_wp",
          "isEdee",
          false
        ],
        [
          "uppercase_wp",
          "isEder",
          false
        ],
        [
          "uppercase_wp",
          "queryable",
          false
        ],
        [
          "uppercase_wp",
          "theAble",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "italic_wp",
                0
              ],
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "italic_wp",
              0
            ],
            "ops": [
              [
                "italic_wp",
                0
              ],
              [
                "means",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 3) - \"italicized\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"italicized\"\n                                     unknown: true\n                                     value: \"italicized\"\n                                     word: \"italicized\"\n                                   }\n    1. means/0  (1, 6) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 11, 'end': 15}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. italic_wp/0  (1, 10) - \"italic\"\n                                   {\n                                     marker: Operator(italic_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 17, 'end': 22}\n                                     text: \"italic\"\n                                     value: \"italic_wp\"\n                                     word: \"italic\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: italicized, unknown: True, value: italicized, word: italicized})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"italicized\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"italicized\"\n                                     unknown: true\n                                     value: \"italicized\"\n                                     word: \"italicized\"\n                                   }\n    1. means/0  (1, 6) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 11, 'end': 15}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. italic_wp/0  (1, 10) - \"italic\"\n                                   {\n                                     marker: Operator(italic_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 17, 'end': 22}\n                                     text: \"italic\"\n                                     value: \"italic_wp\"\n                                     word: \"italic\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(italic_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 17, 'end': 22}, text: italic, value: italic_wp, word: italic})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"italicized\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"italicized\"\n                                     unknown: true\n                                     value: \"italicized\"\n                                     word: \"italicized\"\n                                   }\n    1. means/0  (1, 6) - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 11, 'end': 15}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. italic_wp/1 (dead) (2, 1) - \"italic\"\n                                   {\n                                     prioritized_by: [('italic_wp', 0)]\n                                     dead: true\n                                     marker: Operator(italic_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 17, 'end': 22}\n                                     text: \"italic\"\n                                     value: \"italic_wp\"\n                                     word: \"italic\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 15}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1 (dead) (3, 0) - \"italicized means italic\"\n                                   {\n                                     prioritized_by: [('means', 0)]\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 9}\n                                           text: \"italicized\"\n                                           unknown: true\n                                           value: \"italicized\"\n                                           word: \"italicized\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 22}\n                                     text: \"italicized means italic\"\n                                     to:                                          {\n                                           prioritized_by: [('italic_wp', 0)]\n                                           dead: true\n                                           marker: Operator(italic_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 17, 'end': 22}\n                                           text: \"italic\"\n                                           value: \"italic_wp\"\n                                           word: \"italic\"\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "italicized means italic",
          "word": "means",
          "range": {
            "start": 0,
            "end": 22
          },
          "dead": true,
          "from": {
            "value": "italicized",
            "unknown": true,
            "text": "italicized",
            "marker": "unknown",
            "word": "italicized",
            "range": {
              "start": 0,
              "end": 9
            },
            "dead": true,
            "level": 1
          },
          "to": {
            "value": "italic_wp",
            "number": "one",
            "text": "italic",
            "marker": "italic_wp",
            "word": "italic",
            "range": {
              "start": 17,
              "end": 22
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "italicized means italic"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "italic_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "italic_wp",
            0
          ],
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "italicized means italic",
      "key": {
        "query": "italicized means italic"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "capitalized_wp",
          "capitalize_wp",
          false
        ],
        [
          "capitalized_wp",
          "isEdee",
          false
        ],
        [
          "capitalized_wp",
          "isEder",
          false
        ],
        [
          "capitalized_wp",
          "queryable",
          false
        ],
        [
          "capitalized_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "italicize_wp",
          "isEdee",
          false
        ],
        [
          "italicize_wp",
          "isEder",
          false
        ],
        [
          "italicize_wp",
          "italic_wp",
          false
        ],
        [
          "italicize_wp",
          "queryable",
          false
        ],
        [
          "italicize_wp",
          "theAble",
          false
        ],
        [
          "italicized_wp",
          "isEdee",
          false
        ],
        [
          "italicized_wp",
          "isEder",
          false
        ],
        [
          "italicized_wp",
          "italic_wp",
          false
        ],
        [
          "italicized_wp",
          "queryable",
          false
        ],
        [
          "italicized_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "isEdee",
          false
        ],
        [
          "underlined_wp",
          "isEder",
          false
        ],
        [
          "underlined_wp",
          "queryable",
          false
        ],
        [
          "underlined_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "underline_wp",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "uppercase_wp",
          "capitalize_wp",
          false
        ],
        [
          "uppercase_wp",
          "isEdee",
          false
        ],
        [
          "uppercase_wp",
          "isEder",
          false
        ],
        [
          "uppercase_wp",
          "queryable",
          false
        ],
        [
          "uppercase_wp",
          "theAble",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "capitalized_wp",
              0
            ],
            "ops": [
              [
                "capitalized_wp",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "comma",
              0
            ],
            "ops": [
              [
                "comma",
                0
              ],
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "italicized_wp",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "italicized_wp",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "underlined_wp",
                0
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 12
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 13
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 14
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 15
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 16
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 17
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 2) - \"uppercased\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"uppercased\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. comma/0  (1, 3) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 10}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/0  (1, 6) - \"lowercased\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 21}\n                                     text: \"lowercased\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    3. comma/0  (1, 7) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 22, 'end': 22}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    5. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 15) - \"bolded\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    7. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    9. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    10. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    11. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 39) - \"stylemodifiers\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: uppercased, unknown: True, value: uppercased, word: uppercased})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"uppercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"uppercased\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. comma/0  (1, 3) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 10}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/0  (1, 6) - \"lowercased\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 21}\n                                     text: \"lowercased\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    3. comma/0  (1, 7) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 22, 'end': 22}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    5. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 15) - \"bolded\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    7. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    9. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    11. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 39) - \"stylemodifiers\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 21}, text: lowercased, unknown: True, value: lowercased, word: lowercased})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"uppercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"uppercased\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. comma/0  (1, 3) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 10}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *2. unknown/1 (dead) (2, 1) - \"lowercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 21}\n                                     text: \"lowercased\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    3. comma/0  (1, 7) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 22, 'end': 22}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    5. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/0  (1, 15) - \"bolded\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    7. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    9. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    11. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 39) - \"stylemodifiers\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=6) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 37, 'end': 42}, text: bolded, unknown: True, value: bolded, word: bolded})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"uppercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"uppercased\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. comma/0  (1, 3) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 10}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"lowercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 21}\n                                     text: \"lowercased\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    3. comma/0  (1, 7) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 22, 'end': 22}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    5. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n   *6. unknown/1 (dead) (2, 2) - \"bolded\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    7. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    9. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    11. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    12. unknown/0  (1, 39) - \"stylemodifiers\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=12) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 75, 'end': 88}, raw_text: styleModifiers, text: stylemodifiers, unknown: True, value: stylemodifiers, word: stylemodifiers})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) (2, 0) - \"uppercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"uppercased\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. comma/0  (1, 3) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 10}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    2. unknown/1 (dead) (2, 1) - \"lowercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 21}\n                                     text: \"lowercased\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    3. comma/0  (1, 7) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 22, 'end': 22}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    5. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. unknown/1 (dead) (2, 2) - \"bolded\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    7. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    8. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    9. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    10. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    11. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *12. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 10}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 6\n   *0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (2, 1) - \"lowercased\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 21}\n                                     text: \"lowercased\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    2. comma/0  (1, 7) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 22, 'end': 22}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    3. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    4. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    5. unknown/1 (dead) (2, 2) - \"bolded\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    6. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    7. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    8. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    9. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    10. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    11. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 22, 'end': 22}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 7\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n   *1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    2. capitalized_wp/0  (1, 11) - \"capitalized\"\n                                   {\n                                     marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    3. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"bolded\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    5. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    7. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    8. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    9. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    10. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(capitalized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'capitalize_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'capitalize_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 24, 'end': 34}, text: capitalized, value: capitalize_wp, word: capitalized})\n\n>>>>>>>>>>>>> Counter 8\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n   *2. capitalized_wp/1 (dead) (2, 4) - \"capitalized\"\n                                   {\n                                     prioritized_by: [('capitalized_wp', 0)]\n                                     dead: true\n                                     marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 34}\n                                     text: \"capitalized\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    3. comma/0  (1, 12) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 35, 'end': 35}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    4. unknown/1 (dead) (2, 2) - \"bolded\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    5. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    6. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    7. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    8. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    9. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    10. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 35}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 9\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n   *2. capitalized_wp/1 (dead) (3, 2) - \"capitalized,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 35, 'end': 35}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 35}\n                                     text: \"capitalized,\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    3. unknown/1 (dead) (2, 2) - \"bolded\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 37, 'end': 42}\n                                     text: \"bolded\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    4. comma/0  (1, 16) - \",\"\n                                   {\n                                     depth: \"+\"\n                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 43, 'end': 43}\n                                     text: \",\"\n                                     value: \",\"\n                                     word: \",\"\n                                   }\n    5. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    6. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    7. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    8. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    9. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 43, 'end': 43}, text: ,, value: ,, word: ,})\n\n>>>>>>>>>>>>> Counter 10\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    2. capitalized_wp/1 (dead) (3, 2) - \"capitalized,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 35, 'end': 35}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 35}\n                                     text: \"capitalized,\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n   *3. unknown/1 (dead) (3, 3) - \"bolded,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 43, 'end': 43}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 37, 'end': 43}\n                                     text: \"bolded,\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n    4. italicized_wp/0  (1, 22) - \"italicized\"\n                                   {\n                                     marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    5. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    6. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    7. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    8. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(italicized_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'italic_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'italic_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 45, 'end': 54}, text: italicized, value: italic_wp, word: italicized})\n\n>>>>>>>>>>>>> Counter 11\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    2. capitalized_wp/1 (dead) (3, 2) - \"capitalized,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 35, 'end': 35}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 35}\n                                     text: \"capitalized,\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    3. unknown/1 (dead) (3, 3) - \"bolded,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 43, 'end': 43}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 37, 'end': 43}\n                                     text: \"bolded,\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n   *4. italicized_wp/1 (dead) (2, 5) - \"italicized\"\n                                   {\n                                     prioritized_by: [('italicized_wp', 0)]\n                                     dead: true\n                                     marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 45, 'end': 54}\n                                     text: \"italicized\"\n                                     value: \"italic_wp\"\n                                     word: \"italicized\"\n                                   }\n    5. list/0  (1, 26) - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 56, 'end': 58}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    6. underlined_wp/0  (1, 31) - \"underlined\"\n                                   {\n                                     marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 60, 'end': 69}\n                                     text: \"underlined\"\n                                     value: \"underline_wp\"\n                                     word: \"underlined\"\n                                   }\n    7. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    8. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge)), range: {'start': 56, 'end': 58}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 12\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    2. capitalized_wp/1 (dead) (3, 2) - \"capitalized,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 35, 'end': 35}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 35}\n                                     text: \"capitalized,\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n    3. unknown/1 (dead) (3, 3) - \"bolded,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 43, 'end': 43}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 37, 'end': 43}\n                                     text: \"bolded,\"\n                                     unknown: true\n                                     value: \"bolded\"\n                                     word: \"bolded\"\n                                   }\n   *4. list/1  (3, 4) - \"italicized and underlined\"\n                                   {\n                                     prioritized_by: [('list', 0)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 45, 'end': 69}\n                                     text: \"italicized and underlined\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('italicized_wp', 0)]\n                                         dead: true\n                                         marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 45, 'end': 54}\n                                         text: \"italicized\"\n                                         value: \"italic_wp\"\n                                         word: \"italicized\"\n                                       }\n\n                                       {\n                                         marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 60, 'end': 69}\n                                         text: \"underlined\"\n                                         value: \"underline_wp\"\n                                         word: \"underlined\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    5. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    6. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge)), range: {'start': 45, 'end': 69}, text: italicized and underlined, types: [], value: [Context({dead: True, marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 45, 'end': 54}, text: italicized, value: italic_wp, word: italicized}), Context({marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 60, 'end': 69}, text: underlined, value: underline_wp, word: underlined})], word: and})\n\n>>>>>>>>>>>>> Counter 13\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n    2. capitalized_wp/1 (dead) (3, 2) - \"capitalized,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 35, 'end': 35}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     number: \"one\"\n                                     range: {'start': 24, 'end': 35}\n                                     text: \"capitalized,\"\n                                     value: \"capitalize_wp\"\n                                     word: \"capitalized\"\n                                   }\n   *3. list/1  (4, 0) - \"bolded, italicized and underlined\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 37, 'end': 69}\n                                     text: \"bolded, italicized and underlined\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 43, 'end': 43}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 37, 'end': 43}\n                                         text: \"bolded,\"\n                                         unknown: true\n                                         value: \"bolded\"\n                                         word: \"bolded\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('italicized_wp', 0)]\n                                         dead: true\n                                         marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 45, 'end': 54}\n                                         text: \"italicized\"\n                                         value: \"italic_wp\"\n                                         word: \"italicized\"\n                                       }\n\n                                       {\n                                         marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 60, 'end': 69}\n                                         text: \"underlined\"\n                                         value: \"underline_wp\"\n                                         word: \"underlined\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    4. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    5. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge)), range: {'start': 37, 'end': 69}, text: bolded, italicized and underlined, types: [], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 43, 'end': 43}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 37, 'end': 43}, text: bolded,, unknown: True, value: bolded, word: bolded}), Context({dead: True, marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 45, 'end': 54}, text: italicized, value: italic_wp, word: italicized}), Context({marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 60, 'end': 69}, text: underlined, value: underline_wp, word: underlined})], word: and})\n\n>>>>>>>>>>>>> Counter 14\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n    1. unknown/1 (dead) (3, 1) - \"lowercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 22, 'end': 22}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 12, 'end': 22}\n                                     text: \"lowercased,\"\n                                     unknown: true\n                                     value: \"lowercased\"\n                                     word: \"lowercased\"\n                                   }\n   *2. list/1  (5, 0) - \"capitalized, bolded, italicized and underlined\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 24, 'end': 69}\n                                     text: \"capitalized, bolded, italicized and underlined\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 35, 'end': 35}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         number: \"one\"\n                                         range: {'start': 24, 'end': 35}\n                                         text: \"capitalized,\"\n                                         value: \"capitalize_wp\"\n                                         word: \"capitalized\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 43, 'end': 43}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 37, 'end': 43}\n                                         text: \"bolded,\"\n                                         unknown: true\n                                         value: \"bolded\"\n                                         word: \"bolded\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('italicized_wp', 0)]\n                                         dead: true\n                                         marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 45, 'end': 54}\n                                         text: \"italicized\"\n                                         value: \"italic_wp\"\n                                         word: \"italicized\"\n                                       }\n\n                                       {\n                                         marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 60, 'end': 69}\n                                         text: \"underlined\"\n                                         value: \"underline_wp\"\n                                         word: \"underlined\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    3. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    4. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge)), range: {'start': 24, 'end': 69}, text: capitalized, bolded, italicized and underlined, types: [], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 35}, text: ,, value: ,, word: ,})}), marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), no_convolutions: True, number: one, range: {'start': 24, 'end': 35}, text: capitalized,, value: capitalize_wp, word: capitalized}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 43, 'end': 43}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 37, 'end': 43}, text: bolded,, unknown: True, value: bolded, word: bolded}), Context({dead: True, marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 45, 'end': 54}, text: italicized, value: italic_wp, word: italicized}), Context({marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 60, 'end': 69}, text: underlined, value: underline_wp, word: underlined})], word: and})\n\n>>>>>>>>>>>>> Counter 15\n    0. unknown/1 (dead) (3, 0) - \"uppercased,\"\n                                   {\n                                     prioritized_by: [('comma', 0)]\n                                     dead: true\n                                     decorators:                                          {\n                                           after:                                                {\n                                                 depth: \"+\"\n                                                 marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                 range: {'start': 10, 'end': 10}\n                                                 text: \",\"\n                                                 value: \",\"\n                                                 word: \",\"\n                                               }\n\n                                         }\n\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     no_convolutions: true\n                                     range: {'start': 0, 'end': 10}\n                                     text: \"uppercased,\"\n                                     unknown: true\n                                     value: \"uppercased\"\n                                     word: \"uppercased\"\n                                   }\n   *1. list/1  (6, 0) - \"lowercased, capitalized, bolded, italicized and underlined\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 12, 'end': 69}\n                                     text: \"lowercased, capitalized, bolded, italicized and underlined\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 22, 'end': 22}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 12, 'end': 22}\n                                         text: \"lowercased,\"\n                                         unknown: true\n                                         value: \"lowercased\"\n                                         word: \"lowercased\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 35, 'end': 35}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         number: \"one\"\n                                         range: {'start': 24, 'end': 35}\n                                         text: \"capitalized,\"\n                                         value: \"capitalize_wp\"\n                                         word: \"capitalized\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 43, 'end': 43}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 37, 'end': 43}\n                                         text: \"bolded,\"\n                                         unknown: true\n                                         value: \"bolded\"\n                                         word: \"bolded\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('italicized_wp', 0)]\n                                         dead: true\n                                         marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 45, 'end': 54}\n                                         text: \"italicized\"\n                                         value: \"italic_wp\"\n                                         word: \"italicized\"\n                                       }\n\n                                       {\n                                         marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 60, 'end': 69}\n                                         text: \"underlined\"\n                                         value: \"underline_wp\"\n                                         word: \"underlined\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    2. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    3. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge)), range: {'start': 12, 'end': 69}, text: lowercased, capitalized, bolded, italicized and underlined, types: [], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 22, 'end': 22}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 12, 'end': 22}, text: lowercased,, unknown: True, value: lowercased, word: lowercased}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 35}, text: ,, value: ,, word: ,})}), marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), no_convolutions: True, number: one, range: {'start': 24, 'end': 35}, text: capitalized,, value: capitalize_wp, word: capitalized}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 43, 'end': 43}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 37, 'end': 43}, text: bolded,, unknown: True, value: bolded, word: bolded}), Context({dead: True, marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 45, 'end': 54}, text: italicized, value: italic_wp, word: italicized}), Context({marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 60, 'end': 69}, text: underlined, value: underline_wp, word: underlined})], word: and})\n\n>>>>>>>>>>>>> Counter 16\n   *0. list/1  (7, 0) - \"uppercased, lowercased, capitalized, bolded, italicized and underlined\"\n                                   {\n                                     prioritized_by: [('list', 1)]\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                     range: {'start': 0, 'end': 69}\n                                     text: \"uppercased, lowercased, capitalized, bolded, italicized and underlined\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 10, 'end': 10}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 0, 'end': 10}\n                                         text: \"uppercased,\"\n                                         unknown: true\n                                         value: \"uppercased\"\n                                         word: \"uppercased\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 22, 'end': 22}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 12, 'end': 22}\n                                         text: \"lowercased,\"\n                                         unknown: true\n                                         value: \"lowercased\"\n                                         word: \"lowercased\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 35, 'end': 35}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         number: \"one\"\n                                         range: {'start': 24, 'end': 35}\n                                         text: \"capitalized,\"\n                                         value: \"capitalize_wp\"\n                                         word: \"capitalized\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('comma', 0)]\n                                         dead: true\n                                         decorators:                                              {\n                                               after:                                                    {\n                                                     depth: \"+\"\n                                                     marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                     range: {'start': 43, 'end': 43}\n                                                     text: \",\"\n                                                     value: \",\"\n                                                     word: \",\"\n                                                   }\n\n                                             }\n\n                                         marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         no_convolutions: true\n                                         range: {'start': 37, 'end': 43}\n                                         text: \"bolded,\"\n                                         unknown: true\n                                         value: \"bolded\"\n                                         word: \"bolded\"\n                                       }\n\n                                       {\n                                         prioritized_by: [('italicized_wp', 0)]\n                                         dead: true\n                                         marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 45, 'end': 54}\n                                         text: \"italicized\"\n                                         value: \"italic_wp\"\n                                         word: \"italicized\"\n                                       }\n\n                                       {\n                                         marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         range: {'start': 60, 'end': 69}\n                                         text: \"underlined\"\n                                         value: \"underline_wp\"\n                                         word: \"underlined\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    1. is/0  (1, 34) - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 71, 'end': 73}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. unknown/1 (dead) (2, 3) - \"stylemodifiers\"\n                                   {\n                                     prioritized_by: [('unknown', 0)]\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 75, 'end': 88}\n                                     raw_text: \"styleModifiers\"\n                                     text: \"stylemodifiers\"\n                                     unknown: true\n                                     value: \"stylemodifiers\"\n                                     word: \"stylemodifiers\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 71, 'end': 73}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 17\n   *0. is/1  (8, 0) - \"uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers\"\n                                   {\n                                     prioritized_by: [('is', 0)]\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 88}\n                                           text: \"uppercased, lowercased, capitalized, bolded, italicized and underlined\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 10, 'end': 10}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 0, 'end': 10}\n                                               text: \"uppercased,\"\n                                               unknown: true\n                                               value: \"uppercased\"\n                                               word: \"uppercased\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 22, 'end': 22}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 12, 'end': 22}\n                                               text: \"lowercased,\"\n                                               unknown: true\n                                               value: \"lowercased\"\n                                               word: \"lowercased\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 35, 'end': 35}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               number: \"one\"\n                                               range: {'start': 24, 'end': 35}\n                                               text: \"capitalized,\"\n                                               value: \"capitalize_wp\"\n                                               word: \"capitalized\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 43, 'end': 43}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 37, 'end': 43}\n                                               text: \"bolded,\"\n                                               unknown: true\n                                               value: \"bolded\"\n                                               word: \"bolded\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('italicized_wp', 0)]\n                                               dead: true\n                                               marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               number: \"one\"\n                                               range: {'start': 45, 'end': 54}\n                                               text: \"italicized\"\n                                               value: \"italic_wp\"\n                                               word: \"italicized\"\n                                             }\n\n                                             {\n                                               marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                               number: \"one\"\n                                               range: {'start': 60, 'end': 69}\n                                               text: \"underlined\"\n                                               value: \"underline_wp\"\n                                               word: \"underlined\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 88}\n                                     text: \"uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers\"\n                                     two:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 75, 'end': 88}\n                                           raw_text: \"styleModifiers\"\n                                           text: \"stylemodifiers\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"stylemodifiers\"\n                                           word: \"stylemodifiers\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 88}, text: uppercased, lowercased, capitalized, bolded, italicized and underlined, types: ['unknown'], value: [Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 10}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 0, 'end': 10}, text: uppercased,, unknown: True, value: uppercased, word: uppercased}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 22, 'end': 22}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 12, 'end': 22}, text: lowercased,, unknown: True, value: lowercased, word: lowercased}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 35}, text: ,, value: ,, word: ,})}), marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), no_convolutions: True, number: one, range: {'start': 24, 'end': 35}, text: capitalized,, value: capitalize_wp, word: capitalized}), Context({dead: True, decorators: Context({after: Context({depth: +, marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge)), range: {'start': 43, 'end': 43}, text: ,, value: ,, word: ,})}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), no_convolutions: True, range: {'start': 37, 'end': 43}, text: bolded,, unknown: True, value: bolded, word: bolded}), Context({dead: True, marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 45, 'end': 54}, text: italicized, value: italic_wp, word: italicized}), Context({marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge)), number: one, range: {'start': 60, 'end': 69}, text: underlined, value: underline_wp, word: underlined})], word: and}), range: {'start': 0, 'end': 88}, text: uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers, two: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 75, 'end': 88}, raw_text: styleModifiers, text: stylemodifiers, types: ['unknown'], unknown: True, value: stylemodifiers, word: stylemodifiers}), word: are})\n\n>>>>>>>>>>>>> Counter 18\n   *0. is/2 (dead) (9, 0) - \"uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers\"\n                                   {\n                                     prioritized_by: [('is', 1)]\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'underlined_wp', 'object', 'queryable', 'property', 'isEdee', 'hierarchyAble', 'style_wp', 'isEder', 'underline_wp']}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 88}\n                                           text: \"uppercased, lowercased, capitalized, bolded, italicized and underlined\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           value: [\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 10, 'end': 10}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 0, 'end': 10}\n                                               text: \"uppercased,\"\n                                               unknown: true\n                                               value: \"uppercased\"\n                                               word: \"uppercased\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 22, 'end': 22}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 12, 'end': 22}\n                                               text: \"lowercased,\"\n                                               unknown: true\n                                               value: \"lowercased\"\n                                               word: \"lowercased\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 35, 'end': 35}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(capitalized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               number: \"one\"\n                                               range: {'start': 24, 'end': 35}\n                                               text: \"capitalized,\"\n                                               value: \"capitalize_wp\"\n                                               word: \"capitalized\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('comma', 0)]\n                                               dead: true\n                                               decorators:                                                    {\n                                                     after:                                                          {\n                                                           depth: \"+\"\n                                                           marker: Operator(comma/0, [\"Selector(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }'), , [Any]<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...before[0], decorators.after: operator, no_convolutions: true }')), variables({}) bridge(bridge))\n                                                           range: {'start': 43, 'end': 43}\n                                                           text: \",\"\n                                                           value: \",\"\n                                                           word: \",\"\n                                                         }\n\n                                                   }\n\n                                               marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               no_convolutions: true\n                                               range: {'start': 37, 'end': 43}\n                                               text: \"bolded,\"\n                                               unknown: true\n                                               value: \"bolded\"\n                                               word: \"bolded\"\n                                             }\n\n                                             {\n                                               prioritized_by: [('italicized_wp', 0)]\n                                               dead: true\n                                               marker: Operator(italicized_wp/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               number: \"one\"\n                                               range: {'start': 45, 'end': 54}\n                                               text: \"italicized\"\n                                               value: \"italic_wp\"\n                                               word: \"italicized\"\n                                             }\n\n                                             {\n                                               marker: Operator(underlined_wp/0, [\"Selector(Bridge('{ ...next(operator), value: 'underline_wp' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'underline_wp' }')), variables({}) bridge(bridge))\n                                               number: \"one\"\n                                               range: {'start': 60, 'end': 69}\n                                               text: \"underlined\"\n                                               value: \"underline_wp\"\n                                               word: \"underlined\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 88}\n                                     text: \"uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers\"\n                                     two:                                          {\n                                           prioritized_by: [('unknown', 0)]\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 75, 'end': 88}\n                                           raw_text: \"styleModifiers\"\n                                           text: \"stylemodifiers\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"stylemodifiers\"\n                                           word: \"stylemodifiers\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 88
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "uppercased, lowercased, capitalized, bolded, italicized and underlined",
            "range": {
              "start": 0,
              "end": 88
            },
            "types": [
              "list",
              "unknown"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "value": "uppercased",
                "unknown": true,
                "text": "uppercased,",
                "marker": "unknown",
                "word": "uppercased",
                "range": {
                  "start": 0,
                  "end": 10
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 10,
                      "end": 10
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "level": 1
              },
              {
                "value": "lowercased",
                "unknown": true,
                "text": "lowercased,",
                "marker": "unknown",
                "word": "lowercased",
                "range": {
                  "start": 12,
                  "end": 22
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 22,
                      "end": 22
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "level": 1
              },
              {
                "value": "capitalize_wp",
                "number": "one",
                "text": "capitalized,",
                "marker": "capitalized_wp",
                "word": "capitalized",
                "range": {
                  "start": 24,
                  "end": 35
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 35,
                      "end": 35
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "level": 1
              },
              {
                "value": "bolded",
                "unknown": true,
                "text": "bolded,",
                "marker": "unknown",
                "word": "bolded",
                "range": {
                  "start": 37,
                  "end": 43
                },
                "dead": true,
                "decorators": {
                  "after": {
                    "word": ",",
                    "value": ",",
                    "depth": "+",
                    "text": ",",
                    "marker": "comma",
                    "range": {
                      "start": 43,
                      "end": 43
                    },
                    "level": 0
                  }
                },
                "no_convolutions": true,
                "level": 1
              },
              {
                "value": "italic_wp",
                "number": "one",
                "text": "italicized",
                "marker": "italicized_wp",
                "word": "italicized",
                "range": {
                  "start": 45,
                  "end": 54
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "underline_wp",
                "number": "one",
                "text": "underlined",
                "marker": "underlined_wp",
                "word": "underlined",
                "range": {
                  "start": 60,
                  "end": 69
                },
                "level": 0
              }
            ],
            "level": 1
          },
          "two": {
            "value": "stylemodifiers",
            "unknown": true,
            "text": "stylemodifiers",
            "marker": "unknown",
            "word": "stylemodifiers",
            "raw_text": "styleModifiers",
            "range": {
              "start": 75,
              "end": 88
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "uppercased, lowercased, capitalized, bolded, italicized and underlined are stylemodifiers"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "capitalized_wp",
            0
          ],
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "italicized_wp",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "capitalized_wp",
            0
          ],
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "italicized_wp",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "capitalized_wp",
            0
          ],
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "italicized_wp",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "capitalized_wp",
            0
          ],
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "italicized_wp",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "comma",
            0
          ],
          [
            "is",
            0
          ],
          [
            "italicized_wp",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "italicized_wp",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "underlined_wp",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "uppercased, lowercased, capitalized, bolded, italicized and underlined are styleModifiers",
      "key": {
        "query": "uppercased, lowercased, capitalized, bolded, italicized and underlined are styleModifiers"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "action",
          "action",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "all",
          "quantifier",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "bold_wp",
          "hierarchyAble",
          false
        ],
        [
          "bold_wp",
          "isEdee",
          false
        ],
        [
          "bold_wp",
          "isEder",
          false
        ],
        [
          "bold_wp",
          "object",
          false
        ],
        [
          "bold_wp",
          "property",
          false
        ],
        [
          "bold_wp",
          "queryable",
          false
        ],
        [
          "bold_wp",
          "style_wp",
          false
        ],
        [
          "bold_wp",
          "theAble",
          false
        ],
        [
          "bolded_wp",
          "hierarchyAble",
          false
        ],
        [
          "bolded_wp",
          "isEdee",
          false
        ],
        [
          "bolded_wp",
          "isEder",
          false
        ],
        [
          "bolded_wp",
          "object",
          false
        ],
        [
          "bolded_wp",
          "property",
          false
        ],
        [
          "bolded_wp",
          "queryable",
          false
        ],
        [
          "bolded_wp",
          "styleModifier_wp",
          false
        ],
        [
          "bolded_wp",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "cancel",
          "verb",
          false
        ],
        [
          "capitalize_wp",
          "hierarchyAble",
          false
        ],
        [
          "capitalize_wp",
          "isEdee",
          false
        ],
        [
          "capitalize_wp",
          "isEder",
          false
        ],
        [
          "capitalize_wp",
          "object",
          false
        ],
        [
          "capitalize_wp",
          "property",
          false
        ],
        [
          "capitalize_wp",
          "queryable",
          false
        ],
        [
          "capitalize_wp",
          "styleModifier_wp",
          false
        ],
        [
          "capitalize_wp",
          "style_wp",
          false
        ],
        [
          "capitalize_wp",
          "theAble",
          false
        ],
        [
          "capitalized_wp",
          "capitalize_wp",
          false
        ],
        [
          "capitalized_wp",
          "isEdee",
          false
        ],
        [
          "capitalized_wp",
          "isEder",
          false
        ],
        [
          "capitalized_wp",
          "queryable",
          false
        ],
        [
          "capitalized_wp",
          "theAble",
          false
        ],
        [
          "character_wp",
          "countable",
          false
        ],
        [
          "character_wp",
          "hierarchyAble",
          false
        ],
        [
          "character_wp",
          "isEdee",
          false
        ],
        [
          "character_wp",
          "isEder",
          false
        ],
        [
          "character_wp",
          "object",
          false
        ],
        [
          "character_wp",
          "orderable",
          false
        ],
        [
          "character_wp",
          "property",
          false
        ],
        [
          "character_wp",
          "queryable",
          false
        ],
        [
          "character_wp",
          "statefulElement_wp",
          false
        ],
        [
          "character_wp",
          "theAble",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "code_wp",
          "hierarchyAble",
          false
        ],
        [
          "code_wp",
          "isEdee",
          false
        ],
        [
          "code_wp",
          "isEder",
          false
        ],
        [
          "code_wp",
          "object",
          false
        ],
        [
          "code_wp",
          "property",
          false
        ],
        [
          "code_wp",
          "queryable",
          false
        ],
        [
          "code_wp",
          "style_wp",
          false
        ],
        [
          "code_wp",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "countable",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "direction",
          "direction",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "down",
          "direction",
          false
        ],
        [
          "evaluate",
          "verb",
          false
        ],
        [
          "every",
          "quantifier",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "hasCountOfPieces",
          "countable",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "integer",
          "number",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verb",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "italic_wp",
          "hierarchyAble",
          false
        ],
        [
          "italic_wp",
          "isEdee",
          false
        ],
        [
          "italic_wp",
          "isEder",
          false
        ],
        [
          "italic_wp",
          "object",
          false
        ],
        [
          "italic_wp",
          "property",
          false
        ],
        [
          "italic_wp",
          "queryable",
          false
        ],
        [
          "italic_wp",
          "styleModifier_wp",
          false
        ],
        [
          "italic_wp",
          "style_wp",
          false
        ],
        [
          "italic_wp",
          "theAble",
          false
        ],
        [
          "italicize_wp",
          "isEdee",
          false
        ],
        [
          "italicize_wp",
          "isEder",
          false
        ],
        [
          "italicize_wp",
          "italic_wp",
          false
        ],
        [
          "italicize_wp",
          "queryable",
          false
        ],
        [
          "italicize_wp",
          "theAble",
          false
        ],
        [
          "italicized_wp",
          "isEdee",
          false
        ],
        [
          "italicized_wp",
          "isEder",
          false
        ],
        [
          "italicized_wp",
          "italic_wp",
          false
        ],
        [
          "italicized_wp",
          "queryable",
          false
        ],
        [
          "italicized_wp",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "left",
          "direction",
          false
        ],
        [
          "letter_wp",
          "character_wp",
          false
        ],
        [
          "letter_wp",
          "isEdee",
          false
        ],
        [
          "letter_wp",
          "isEder",
          false
        ],
        [
          "letter_wp",
          "queryable",
          false
        ],
        [
          "letter_wp",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "listening",
          "action",
          false
        ],
        [
          "lowercase_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercase_wp",
          "isEdee",
          false
        ],
        [
          "lowercase_wp",
          "isEder",
          false
        ],
        [
          "lowercase_wp",
          "object",
          false
        ],
        [
          "lowercase_wp",
          "property",
          false
        ],
        [
          "lowercase_wp",
          "queryable",
          false
        ],
        [
          "lowercase_wp",
          "style_wp",
          false
        ],
        [
          "lowercase_wp",
          "theAble",
          false
        ],
        [
          "lowercased_wp",
          "hierarchyAble",
          false
        ],
        [
          "lowercased_wp",
          "isEdee",
          false
        ],
        [
          "lowercased_wp",
          "isEder",
          false
        ],
        [
          "lowercased_wp",
          "object",
          false
        ],
        [
          "lowercased_wp",
          "property",
          false
        ],
        [
          "lowercased_wp",
          "queryable",
          false
        ],
        [
          "lowercased_wp",
          "styleModifier_wp",
          false
        ],
        [
          "lowercased_wp",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "memorable",
          "theAble",
          false
        ],
        [
          "modifies",
          "verb",
          false
        ],
        [
          "move",
          "verb",
          false
        ],
        [
          "moveAmount",
          "preposition",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "negatable",
          "queryable",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "number",
          "quantifier",
          false
        ],
        [
          "number",
          "queryable",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "orderable",
          "queryable",
          false
        ],
        [
          "ordinalOnOrdered",
          "adjective",
          false
        ],
        [
          "paragraph_wp",
          "countable",
          false
        ],
        [
          "paragraph_wp",
          "hierarchyAble",
          false
        ],
        [
          "paragraph_wp",
          "isEdee",
          false
        ],
        [
          "paragraph_wp",
          "isEder",
          false
        ],
        [
          "paragraph_wp",
          "object",
          false
        ],
        [
          "paragraph_wp",
          "orderable",
          false
        ],
        [
          "paragraph_wp",
          "property",
          false
        ],
        [
          "paragraph_wp",
          "queryable",
          false
        ],
        [
          "paragraph_wp",
          "statefulElement_wp",
          false
        ],
        [
          "paragraph_wp",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "propertyOf",
          "preposition",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "quantifier",
          "quantifier",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "remember",
          "verb",
          false
        ],
        [
          "right",
          "direction",
          false
        ],
        [
          "select",
          "verb",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "statefulElement_wp",
          "hierarchyAble",
          false
        ],
        [
          "statefulElement_wp",
          "isEdee",
          false
        ],
        [
          "statefulElement_wp",
          "isEder",
          false
        ],
        [
          "statefulElement_wp",
          "object",
          false
        ],
        [
          "statefulElement_wp",
          "property",
          false
        ],
        [
          "statefulElement_wp",
          "queryable",
          false
        ],
        [
          "statefulElement_wp",
          "theAble",
          false
        ],
        [
          "stm_before",
          "adjective",
          false
        ],
        [
          "stop",
          "verb",
          false
        ],
        [
          "styleModifier_wp",
          "hierarchyAble",
          false
        ],
        [
          "styleModifier_wp",
          "isEdee",
          false
        ],
        [
          "styleModifier_wp",
          "isEder",
          false
        ],
        [
          "styleModifier_wp",
          "object",
          false
        ],
        [
          "styleModifier_wp",
          "property",
          false
        ],
        [
          "styleModifier_wp",
          "queryable",
          false
        ],
        [
          "styleModifier_wp",
          "theAble",
          false
        ],
        [
          "style_wp",
          "hierarchyAble",
          false
        ],
        [
          "style_wp",
          "isEdee",
          false
        ],
        [
          "style_wp",
          "isEder",
          false
        ],
        [
          "style_wp",
          "object",
          false
        ],
        [
          "style_wp",
          "property",
          false
        ],
        [
          "style_wp",
          "queryable",
          false
        ],
        [
          "style_wp",
          "theAble",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "text_wp",
          "hierarchyAble",
          false
        ],
        [
          "text_wp",
          "isEdee",
          false
        ],
        [
          "text_wp",
          "isEder",
          false
        ],
        [
          "text_wp",
          "object",
          false
        ],
        [
          "text_wp",
          "property",
          false
        ],
        [
          "text_wp",
          "queryable",
          false
        ],
        [
          "text_wp",
          "statefulElement_wp",
          false
        ],
        [
          "text_wp",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "queryable",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "underline_wp",
          "hierarchyAble",
          false
        ],
        [
          "underline_wp",
          "isEdee",
          false
        ],
        [
          "underline_wp",
          "isEder",
          false
        ],
        [
          "underline_wp",
          "object",
          false
        ],
        [
          "underline_wp",
          "property",
          false
        ],
        [
          "underline_wp",
          "queryable",
          false
        ],
        [
          "underline_wp",
          "styleModifier_wp",
          false
        ],
        [
          "underline_wp",
          "style_wp",
          false
        ],
        [
          "underline_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "isEdee",
          false
        ],
        [
          "underlined_wp",
          "isEder",
          false
        ],
        [
          "underlined_wp",
          "queryable",
          false
        ],
        [
          "underlined_wp",
          "theAble",
          false
        ],
        [
          "underlined_wp",
          "underline_wp",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "unselect",
          "verb",
          false
        ],
        [
          "up",
          "direction",
          false
        ],
        [
          "uppercase_wp",
          "capitalize_wp",
          false
        ],
        [
          "uppercase_wp",
          "isEdee",
          false
        ],
        [
          "uppercase_wp",
          "isEder",
          false
        ],
        [
          "uppercase_wp",
          "queryable",
          false
        ],
        [
          "uppercase_wp",
          "theAble",
          false
        ],
        [
          "uppercased_wp",
          "hierarchyAble",
          false
        ],
        [
          "uppercased_wp",
          "isEdee",
          false
        ],
        [
          "uppercased_wp",
          "isEder",
          false
        ],
        [
          "uppercased_wp",
          "object",
          false
        ],
        [
          "uppercased_wp",
          "property",
          false
        ],
        [
          "uppercased_wp",
          "queryable",
          false
        ],
        [
          "uppercased_wp",
          "styleModifier_wp",
          false
        ],
        [
          "uppercased_wp",
          "theAble",
          false
        ],
        [
          "verb",
          "verb",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "word_wp",
          "countable",
          false
        ],
        [
          "word_wp",
          "hierarchyAble",
          false
        ],
        [
          "word_wp",
          "isEdee",
          false
        ],
        [
          "word_wp",
          "isEder",
          false
        ],
        [
          "word_wp",
          "object",
          false
        ],
        [
          "word_wp",
          "orderable",
          false
        ],
        [
          "word_wp",
          "property",
          false
        ],
        [
          "word_wp",
          "queryable",
          false
        ],
        [
          "word_wp",
          "statefulElement_wp",
          false
        ],
        [
          "word_wp",
          "theAble",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "resetIdSuffix",
              0
            ],
            "ops": [
              [
                "resetIdSuffix",
                0
              ]
            ],
            "counter": 1
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. resetIdSuffix/0  (1, 1) - \"resetidsuffix\"\n                                   {\n                                     default: true\n                                     marker: Operator(resetIdSuffix/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 12}\n                                     raw_text: \"resetIdSuffix\"\n                                     text: \"resetidsuffix\"\n                                     value: \"resetIdSuffix\"\n                                     word: \"resetidsuffix\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({default: True, marker: Operator(resetIdSuffix/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 12}, raw_text: resetIdSuffix, text: resetidsuffix, value: resetIdSuffix, word: resetidsuffix})\n\n>>>>>>>>>>>>> Counter 2\n   *0. resetIdSuffix/1 (dead) (2, 0) - \"resetidsuffix\"\n                                   {\n                                     prioritized_by: [('resetIdSuffix', 0)]\n                                     dead: true\n                                     default: true\n                                     marker: Operator(resetIdSuffix/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 12}\n                                     raw_text: \"resetIdSuffix\"\n                                     text: \"resetidsuffix\"\n                                     value: \"resetIdSuffix\"\n                                     word: \"resetidsuffix\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "resetIdSuffix",
          "value": "resetIdSuffix",
          "default": true,
          "text": "resetidsuffix",
          "word": "resetidsuffix",
          "raw_text": "resetIdSuffix",
          "range": {
            "start": 0,
            "end": 12
          },
          "dead": true,
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "wp#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "resetidsuffix"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [],
      "learned_contextual_priorities": [],
      "query": "resetIdSuffix",
      "key": {
        "query": "resetIdSuffix"
      }
    },
    {
      "extraConfig": true,
      "operators": [
        "([changeState_wp|make] ([statefulElement_wp]) ([stateValue_wp|]))",
        "((style_wp/*) [applyStyle_wp] ([statefulElement_wp|]))",
        "((word_wp/*) [wordComparisonWith_wp] ([comparisonWith_wp|with] (a/0)? (letters)))",
        "((word_wp/*) [wordComparison_wp] (a/0)? (letters))",
        "((styleModifier_wp/*) [modifiedByStyle_wp] (statefulElement_wp/* && context.determiner == undefined))"
      ],
      "bridges": [
        {
          "id": "modifiedByStyle_wp",
          "parents": [
            "adjective"
          ],
          "convolution": true,
          "bridge": "{ ...after[0], style: before[0], target: after[0], generate: ['style', 'target'], conditions: append(after[0].conditions, [before[0]]) }"
        },
        {
          "id": "wordComparisonWith_wp",
          "parents": [
            "verb"
          ],
          "words": [
            {
              "word": "start",
              "comparison": "prefix"
            },
            {
              "word": "starts",
              "comparison": "prefix"
            },
            {
              "word": "end",
              "comparison": "suffix"
            },
            {
              "word": "ends",
              "comparison": "suffix"
            }
          ],
          "bridge": "{ ...next(operator), element: before[0], subject: before[0], letters: after[0], verb: operator, generate: ['element', 'verb', 'letters'] }"
        },
        {
          "id": "wordComparison_wp",
          "parents": [
            "verb"
          ],
          "words": [
            {
              "word": "contain",
              "comparison": "include"
            },
            {
              "word": "contains",
              "comparison": "include"
            },
            {
              "word": "include",
              "comparison": "include"
            },
            {
              "word": "includes",
              "comparison": "include"
            }
          ],
          "optional": {
            "1": "{ marker: 'a' }"
          },
          "bridge": "{ ...next(operator), element: before[0], subject: before[0], letters: after[1], verb: operator, generate: ['element', 'verb', 'letters'] }"
        },
        {
          "id": "comparisonWith_wp",
          "parents": [
            "preposition"
          ],
          "optional": {
            "1": "{ marker: 'a' }"
          },
          "bridge": "{ ...next(operator), operator: operator, letters: after[1], generate: ['operator', 'letters'] }"
        },
        {
          "id": "applyStyle_wp",
          "parents": [
            "verb"
          ],
          "convolution": true,
          "bridge": "{ ...next(operator), element: after[0], state: before[0], operator: operator, generate: ['state', 'element'] }",
          "localHierarchy": [
            [
              "thisitthat",
              "statefulElement_wp"
            ],
            [
              "everything",
              "statefulElement_wp"
            ]
          ]
        },
        {
          "id": "changeState_wp",
          "parents": [
            "verb"
          ],
          "bridge": "{ ...next(operator), element: after[0], state: after[1], operator: operator, generate: ['operator', 'element', 'state'] }",
          "localHierarchy": [
            [
              "thisitthat",
              "statefulElement_wp"
            ],
            [
              "everything",
              "statefulElement_wp"
            ]
          ]
        },
        {
          "id": "stateValue_wp",
          "children": [
            "color_colors",
            "style_wp"
          ]
        }
      ],
      "semantics": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/wp.js:248"
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/wp.js:257"
        }
      ],
      "priorities": [
        {
          "context": [
            [
              "changeState_wp",
              0
            ],
            [
              "statefulElement_wp",
              0
            ],
            [
              "list",
              0
            ]
          ],
          "ordered": true,
          "choose": [
            0
          ]
        },
        {
          "context": [
            [
              "comparisonWith_wp",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "list",
              1
            ]
          ],
          "ordered": true,
          "choose": [
            0
          ]
        }
      ]
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "capitalize_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "capitalize_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "capitalize_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "capitalize_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "capitalized_wp",
        0
      ],
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "italicized_wp",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "capitalized_wp",
        0
      ],
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "italicized_wp",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "capitalized_wp",
        0
      ],
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "italicized_wp",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "capitalized_wp",
        0
      ],
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "italicized_wp",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "character_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "character_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "italicized_wp",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "comma",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "italicized_wp",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "orderable",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "statefulElement_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "underlined_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "italic_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "italic_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "italic_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "italic_wp",
        0
      ],
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "underline_wp",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "underline_wp",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "setIdSuffix",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "setIdSuffix",
        0
      ],
      [
        "unknown",
        1
      ]
    ]
  ],
  "learned_contextual_priorities": []
}